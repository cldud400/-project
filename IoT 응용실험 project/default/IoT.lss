
IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000045c  00800100  00001b60  00001bf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014b  0080055c  0080055c  00002050  2**0
                  ALLOC
  3 .stab         00000cf0  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000218  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e8  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004cb  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000020d9  00000000  00000000  0000360b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000df7  00000000  00000000  000056e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000221c  00000000  00000000  000064db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a0  00000000  00000000  000086f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000847  00000000  00000000  00008a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000edf  00000000  00000000  000092df  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000023d  00000000  00000000  0000a1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a8  00000000  00000000  0000a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_9>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_14>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_29>
      78:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_30>
      7c:	0c 94 29 03 	jmp	0x652	; 0x652 <__vector_31>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	15 e0       	ldi	r17, 0x05	; 5
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e6       	ldi	r30, 0x60	; 96
      a0:	fb e1       	ldi	r31, 0x1B	; 27
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ac 35       	cpi	r26, 0x5C	; 92
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	16 e0       	ldi	r17, 0x06	; 6
      b4:	ac e5       	ldi	r26, 0x5C	; 92
      b6:	b5 e0       	ldi	r27, 0x05	; 5
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 3a       	cpi	r26, 0xA7	; 167
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 07 08 	call	0x100e	; 0x100e <main>
      c6:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <putChar>:
}

static void
putChar(char c)
{
   if(txHead == txTail)
      ce:	20 91 6a 05 	lds	r18, 0x056A
      d2:	30 91 6b 05 	lds	r19, 0x056B
      d6:	40 91 6c 05 	lds	r20, 0x056C
      da:	50 91 6d 05 	lds	r21, 0x056D
      de:	24 17       	cp	r18, r20
      e0:	35 07       	cpc	r19, r21
      e2:	39 f4       	brne	.+14     	; 0xf2 <putChar+0x24>
   {
      if(UCSR1A & (1 << UDRE))
      e4:	90 91 9b 00 	lds	r25, 0x009B
      e8:	95 ff       	sbrs	r25, 5
      ea:	2f c0       	rjmp	.+94     	; 0x14a <putChar+0x7c>
	  {
	     UDR1=c;
      ec:	80 93 9c 00 	sts	0x009C, r24
		 return;
      f0:	08 95       	ret
	  }
   } 
   else if((txHead + 1) % BUFFSIZE == txTail)
      f2:	2f 5f       	subi	r18, 0xFF	; 255
      f4:	3f 4f       	sbci	r19, 0xFF	; 255
      f6:	2f 77       	andi	r18, 0x7F	; 127
      f8:	30 70       	andi	r19, 0x00	; 0
      fa:	24 17       	cp	r18, r20
      fc:	35 07       	cpc	r19, r21
      fe:	29 f5       	brne	.+74     	; 0x14a <putChar+0x7c>
   {

         while(!(UCSR1A & (1 << UDRE)));
     100:	90 91 9b 00 	lds	r25, 0x009B
     104:	95 ff       	sbrs	r25, 5
     106:	fc cf       	rjmp	.-8      	; 0x100 <putChar+0x32>
         UDR1 = txBuff[txTail];
     108:	25 56       	subi	r18, 0x65	; 101
     10a:	3a 4f       	sbci	r19, 0xFA	; 250
     10c:	f9 01       	movw	r30, r18
     10e:	90 81       	ld	r25, Z
     110:	90 93 9c 00 	sts	0x009C, r25
		 ATOMIC(txTail = (txTail + 1) % BUFFSIZE);
     114:	9f b7       	in	r25, 0x3f	; 63
     116:	f8 94       	cli
     118:	20 91 6c 05 	lds	r18, 0x056C
     11c:	30 91 6d 05 	lds	r19, 0x056D
     120:	2f 5f       	subi	r18, 0xFF	; 255
     122:	3f 4f       	sbci	r19, 0xFF	; 255
     124:	2f 77       	andi	r18, 0x7F	; 127
     126:	30 70       	andi	r19, 0x00	; 0
     128:	30 93 6d 05 	sts	0x056D, r19
     12c:	20 93 6c 05 	sts	0x056C, r18
     130:	20 91 6a 05 	lds	r18, 0x056A
     134:	30 91 6b 05 	lds	r19, 0x056B
     138:	2f 5f       	subi	r18, 0xFF	; 255
     13a:	3f 4f       	sbci	r19, 0xFF	; 255
     13c:	2f 77       	andi	r18, 0x7F	; 127
     13e:	30 70       	andi	r19, 0x00	; 0
     140:	30 93 6b 05 	sts	0x056B, r19
     144:	20 93 6a 05 	sts	0x056A, r18
     148:	9f bf       	out	0x3f, r25	; 63
   }
   txBuff[txHead] = c;
     14a:	e0 91 6a 05 	lds	r30, 0x056A
     14e:	f0 91 6b 05 	lds	r31, 0x056B
     152:	e5 56       	subi	r30, 0x65	; 101
     154:	fa 4f       	sbci	r31, 0xFA	; 250
     156:	80 83       	st	Z, r24
   
   ATOMIC(txHead = (txHead + 1) % BUFFSIZE);//racing 현상제거
     158:	2f b7       	in	r18, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	80 91 6a 05 	lds	r24, 0x056A
     160:	90 91 6b 05 	lds	r25, 0x056B
     164:	02 96       	adiw	r24, 0x02	; 2
     166:	8f 77       	andi	r24, 0x7F	; 127
     168:	90 70       	andi	r25, 0x00	; 0
     16a:	90 93 6b 05 	sts	0x056B, r25
     16e:	80 93 6a 05 	sts	0x056A, r24
     172:	2f bf       	out	0x3f, r18	; 63
     174:	08 95       	ret

00000176 <__vector_16>:




ISR(TIMER0_OVF_vect)		//interrupt service routine
{
     176:	1f 92       	push	r1
     178:	0f 92       	push	r0
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	0f 92       	push	r0
     17e:	0b b6       	in	r0, 0x3b	; 59
     180:	0f 92       	push	r0
     182:	11 24       	eor	r1, r1
     184:	2f 93       	push	r18
     186:	3f 93       	push	r19
     188:	4f 93       	push	r20
     18a:	5f 93       	push	r21
     18c:	6f 93       	push	r22
     18e:	7f 93       	push	r23
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
     198:	ef 93       	push	r30
     19a:	ff 93       	push	r31
	TCNT0 = 0x06;
     19c:	86 e0       	ldi	r24, 0x06	; 6
     19e:	82 bf       	out	0x32, r24	; 50
#ifdef	_LED
    if(reci && on) onM();
     1a0:	80 91 61 05 	lds	r24, 0x0561
     1a4:	88 23       	and	r24, r24
     1a6:	39 f0       	breq	.+14     	; 0x1b6 <__vector_16+0x40>
     1a8:	80 91 5c 05 	lds	r24, 0x055C
     1ac:	88 23       	and	r24, r24
     1ae:	19 f0       	breq	.+6      	; 0x1b6 <__vector_16+0x40>
     1b0:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <onM>
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__vector_16+0x44>
	else EX_LED=0x00;
     1b6:	10 92 08 80 	sts	0x8008, r1
#endif
#ifdef	_SPEAKER
    playMusic();
     1ba:	0e 94 15 06 	call	0xc2a	; 0xc2a <playMusic>
//10 a 11 b 12 c 13 d 14 e 15f

static void
updateFnd(void)
{
	EX_FND_SELECT = 0x0f;
     1be:	8f e0       	ldi	r24, 0x0F	; 15
     1c0:	80 93 03 80 	sts	0x8003, r24
	if(fndPosition != 1) EX_FND_DATA = fndSegment[fndDigit[fndPosition]];
     1c4:	20 91 79 05 	lds	r18, 0x0579
     1c8:	21 30       	cpi	r18, 0x01	; 1
     1ca:	49 f0       	breq	.+18     	; 0x1de <__vector_16+0x68>
     1cc:	e2 2f       	mov	r30, r18
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	ec 59       	subi	r30, 0x9C	; 156
     1d2:	fa 4f       	sbci	r31, 0xFA	; 250
     1d4:	e0 81       	ld	r30, Z
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	e6 5a       	subi	r30, 0xA6	; 166
     1da:	fe 4f       	sbci	r31, 0xFE	; 254
     1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <__vector_16+0x72>
	if(fndPosition == 1) EX_FND_DATA = fndSegmentd[fndDigit[fndPosition]];
     1de:	e0 91 65 05 	lds	r30, 0x0565
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	ec 59       	subi	r30, 0x9C	; 156
     1e6:	fe 4f       	sbci	r31, 0xFE	; 254
     1e8:	80 81       	ld	r24, Z
     1ea:	80 93 02 80 	sts	0x8002, r24
	if(on == 0) EX_FND_DATA = 0x00;
     1ee:	80 91 5c 05 	lds	r24, 0x055C
     1f2:	88 23       	and	r24, r24
     1f4:	11 f4       	brne	.+4      	; 0x1fa <__vector_16+0x84>
     1f6:	10 92 02 80 	sts	0x8002, r1
	EX_FND_SELECT = ~(0x01 << fndPosition);				////선택된 부분을 전부 0으로 만들어줌
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	02 2e       	mov	r0, r18
     200:	02 c0       	rjmp	.+4      	; 0x206 <__vector_16+0x90>
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	0a 94       	dec	r0
     208:	e2 f7       	brpl	.-8      	; 0x202 <__vector_16+0x8c>
     20a:	80 95       	com	r24
     20c:	80 93 03 80 	sts	0x8003, r24

	fndPosition++;
     210:	2f 5f       	subi	r18, 0xFF	; 255
	fndPosition %= 4;
     212:	23 70       	andi	r18, 0x03	; 3
     214:	20 93 79 05 	sts	0x0579, r18
    playMusic();
#endif
#ifdef	_FND
	updateFnd();
#endif
}
     218:	ff 91       	pop	r31
     21a:	ef 91       	pop	r30
     21c:	bf 91       	pop	r27
     21e:	af 91       	pop	r26
     220:	9f 91       	pop	r25
     222:	8f 91       	pop	r24
     224:	7f 91       	pop	r23
     226:	6f 91       	pop	r22
     228:	5f 91       	pop	r21
     22a:	4f 91       	pop	r20
     22c:	3f 91       	pop	r19
     22e:	2f 91       	pop	r18
     230:	0f 90       	pop	r0
     232:	0b be       	out	0x3b, r0	; 59
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <__vector_14>:

ISR(TIMER1_OVF_vect)
{
     23e:	1f 92       	push	r1
     240:	0f 92       	push	r0
     242:	0f b6       	in	r0, 0x3f	; 63
     244:	0f 92       	push	r0
     246:	0b b6       	in	r0, 0x3b	; 59
     248:	0f 92       	push	r0
     24a:	11 24       	eor	r1, r1
     24c:	8f 93       	push	r24
     24e:	9f 93       	push	r25
     250:	ef 93       	push	r30
     252:	ff 93       	push	r31
	};

void
toggleSpeaker(void)
{
	if(musicKey < 15) {
     254:	e0 91 25 01 	lds	r30, 0x0125
     258:	ef 30       	cpi	r30, 0x0F	; 15
     25a:	70 f4       	brcc	.+28     	; 0x278 <__vector_14+0x3a>
		TCNT1H = musicScale[musicKey] >> 8;
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	ee 0f       	add	r30, r30
     260:	ff 1f       	adc	r31, r31
     262:	ea 5d       	subi	r30, 0xDA	; 218
     264:	fe 4f       	sbci	r31, 0xFE	; 254
     266:	81 81       	ldd	r24, Z+1	; 0x01
     268:	8d bd       	out	0x2d, r24	; 45
		TCNT1L = musicScale[musicKey] & 0xff;
     26a:	80 81       	ld	r24, Z
     26c:	8c bd       	out	0x2c, r24	; 44
		PORTG ^= 0x10;
     26e:	80 91 65 00 	lds	r24, 0x0065
     272:	90 e1       	ldi	r25, 0x10	; 16
     274:	89 27       	eor	r24, r25
     276:	03 c0       	rjmp	.+6      	; 0x27e <__vector_14+0x40>
	} else
		PORTG &= 0xef;
     278:	80 91 65 00 	lds	r24, 0x0065
     27c:	8f 7e       	andi	r24, 0xEF	; 239
     27e:	80 93 65 00 	sts	0x0065, r24
ISR(TIMER1_OVF_vect)
{
#ifdef	_SPEAKER
	toggleSpeaker();
#endif
}
     282:	ff 91       	pop	r31
     284:	ef 91       	pop	r30
     286:	9f 91       	pop	r25
     288:	8f 91       	pop	r24
     28a:	0f 90       	pop	r0
     28c:	0b be       	out	0x3b, r0	; 59
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <__vector_9>:
ISR(TIMER2_COMP_vect) {
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	0b b6       	in	r0, 0x3b	; 59
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
     2a6:	2f 93       	push	r18
     2a8:	3f 93       	push	r19
     2aa:	4f 93       	push	r20
     2ac:	5f 93       	push	r21
     2ae:	6f 93       	push	r22
     2b0:	7f 93       	push	r23
     2b2:	8f 93       	push	r24
     2b4:	9f 93       	push	r25
     2b6:	ef 93       	push	r30
     2b8:	ff 93       	push	r31
	TCNT2=0xce;
     2ba:	8e ec       	ldi	r24, 0xCE	; 206
     2bc:	84 bd       	out	0x24, r24	; 36
static unsigned char       dotMatrixLine = 0;
static unsigned char       dmCount = 0;
static void
updateDotMatrix(void)
{
	if(!dotMatrixData) return;
     2be:	40 91 68 05 	lds	r20, 0x0568
     2c2:	50 91 69 05 	lds	r21, 0x0569
     2c6:	41 15       	cp	r20, r1
     2c8:	51 05       	cpc	r21, r1
     2ca:	21 f1       	breq	.+72     	; 0x314 <__vector_9+0x7c>
	if(++dmCount <20) return;
     2cc:	80 91 73 05 	lds	r24, 0x0573
     2d0:	8f 5f       	subi	r24, 0xFF	; 255
     2d2:	80 93 73 05 	sts	0x0573, r24
     2d6:	84 31       	cpi	r24, 0x14	; 20
     2d8:	e8 f0       	brcs	.+58     	; 0x314 <__vector_9+0x7c>
	dmCount = 0;
     2da:	10 92 73 05 	sts	0x0573, r1
	EX_DOT_MATRIX_LINE = 1 << dotMatrixLine;
     2de:	80 91 74 05 	lds	r24, 0x0574
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	08 2e       	mov	r0, r24
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <__vector_9+0x56>
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	0a 94       	dec	r0
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <__vector_9+0x52>
     2f2:	20 93 04 80 	sts	0x8004, r18
	EX_DOT_MATRIX_DATA = dotMatrixData[dotMatrixLine];
     2f6:	e8 2f       	mov	r30, r24
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	ee 0f       	add	r30, r30
     2fc:	ff 1f       	adc	r31, r31
     2fe:	e4 0f       	add	r30, r20
     300:	f5 1f       	adc	r31, r21
     302:	90 81       	ld	r25, Z
     304:	90 93 06 80 	sts	0x8006, r25
	dotMatrixLine++;
     308:	8f 5f       	subi	r24, 0xFF	; 255
	dotMatrixLine %= 10;
     30a:	6a e0       	ldi	r22, 0x0A	; 10
     30c:	0e 94 08 09 	call	0x1210	; 0x1210 <__udivmodqi4>
     310:	90 93 74 05 	sts	0x0574, r25
	TCNT2=0xce;
#ifdef _DOT_MATRIX
	updateDotMatrix();
#endif
#ifdef _STEPPER
	if(on && (ds > 0) && !stop) stepMotor();
     314:	80 91 5c 05 	lds	r24, 0x055C
     318:	88 23       	and	r24, r24
     31a:	09 f4       	brne	.+2      	; 0x31e <__vector_9+0x86>
     31c:	44 c0       	rjmp	.+136    	; 0x3a6 <__vector_9+0x10e>
     31e:	80 91 5d 05 	lds	r24, 0x055D
     322:	90 91 5e 05 	lds	r25, 0x055E
     326:	18 16       	cp	r1, r24
     328:	19 06       	cpc	r1, r25
     32a:	ec f5       	brge	.+122    	; 0x3a6 <__vector_9+0x10e>
     32c:	80 91 63 05 	lds	r24, 0x0563
     330:	88 23       	and	r24, r24
     332:	c9 f5       	brne	.+114    	; 0x3a6 <__vector_9+0x10e>


void
stepMotor(void)
{
	if(sm1Speed && (++sm1Count == sm1MaxCount)) {
     334:	20 91 00 01 	lds	r18, 0x0100
     338:	30 91 01 01 	lds	r19, 0x0101
     33c:	21 15       	cp	r18, r1
     33e:	31 05       	cpc	r19, r1
     340:	91 f1       	breq	.+100    	; 0x3a6 <__vector_9+0x10e>
     342:	80 91 75 05 	lds	r24, 0x0575
     346:	90 91 76 05 	lds	r25, 0x0576
     34a:	01 96       	adiw	r24, 0x01	; 1
     34c:	90 93 76 05 	sts	0x0576, r25
     350:	80 93 75 05 	sts	0x0575, r24
     354:	40 91 50 01 	lds	r20, 0x0150
     358:	50 91 51 01 	lds	r21, 0x0151
     35c:	84 17       	cp	r24, r20
     35e:	95 07       	cpc	r25, r21
     360:	11 f5       	brne	.+68     	; 0x3a6 <__vector_9+0x10e>
			EX_STEPPER = smStepPhase[sm1Step];
     362:	80 91 77 05 	lds	r24, 0x0577
     366:	90 91 78 05 	lds	r25, 0x0578
     36a:	fc 01       	movw	r30, r24
     36c:	ee 5a       	subi	r30, 0xAE	; 174
     36e:	fe 4f       	sbci	r31, 0xFE	; 254
     370:	40 81       	ld	r20, Z
     372:	40 93 09 80 	sts	0x8009, r20
			if(sm1Speed > 0) sm1Step = (sm1Step + 1) % NSTEPS;
     376:	12 16       	cp	r1, r18
     378:	13 06       	cpc	r1, r19
     37a:	24 f4       	brge	.+8      	; 0x384 <__vector_9+0xec>
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	87 70       	andi	r24, 0x07	; 7
     380:	90 70       	andi	r25, 0x00	; 0
     382:	09 c0       	rjmp	.+18     	; 0x396 <__vector_9+0xfe>
			else if(--sm1Step < 0) sm1Step = NSTEPS - 1;
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	90 93 78 05 	sts	0x0578, r25
     38a:	80 93 77 05 	sts	0x0577, r24
     38e:	97 ff       	sbrs	r25, 7
     390:	06 c0       	rjmp	.+12     	; 0x39e <__vector_9+0x106>
     392:	87 e0       	ldi	r24, 0x07	; 7
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	90 93 78 05 	sts	0x0578, r25
     39a:	80 93 77 05 	sts	0x0577, r24
			sm1Count = 0;
     39e:	10 92 76 05 	sts	0x0576, r1
     3a2:	10 92 75 05 	sts	0x0575, r1
	updateDotMatrix();
#endif
#ifdef _STEPPER
	if(on && (ds > 0) && !stop) stepMotor();
#endif
}
     3a6:	ff 91       	pop	r31
     3a8:	ef 91       	pop	r30
     3aa:	9f 91       	pop	r25
     3ac:	8f 91       	pop	r24
     3ae:	7f 91       	pop	r23
     3b0:	6f 91       	pop	r22
     3b2:	5f 91       	pop	r21
     3b4:	4f 91       	pop	r20
     3b6:	3f 91       	pop	r19
     3b8:	2f 91       	pop	r18
     3ba:	0f 90       	pop	r0
     3bc:	0b be       	out	0x3b, r0	; 59
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <delay>:
#define LCD_RS_ON		(EX_CLCD_CONTROL=(clcdControl |= 0x01))
#define LCD_RS_OFF		(EX_CLCD_CONTROL=(clcdControl &= ~0x01))

void
delay(int n)
{
     3c8:	df 93       	push	r29
     3ca:	cf 93       	push	r28
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <delay+0x6>
     3ce:	00 d0       	rcall	.+0      	; 0x3d0 <delay+0x8>
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
	for(volatile int i = 0; i < n; i++)	{
     3d4:	1a 82       	std	Y+2, r1	; 0x02
     3d6:	19 82       	std	Y+1, r1	; 0x01
     3d8:	15 c0       	rjmp	.+42     	; 0x404 <delay+0x3c>
		for(volatile int j = 0; j<600; j++);
     3da:	1c 82       	std	Y+4, r1	; 0x04
     3dc:	1b 82       	std	Y+3, r1	; 0x03
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <delay+0x24>
     3e0:	2b 81       	ldd	r18, Y+3	; 0x03
     3e2:	3c 81       	ldd	r19, Y+4	; 0x04
     3e4:	2f 5f       	subi	r18, 0xFF	; 255
     3e6:	3f 4f       	sbci	r19, 0xFF	; 255
     3e8:	3c 83       	std	Y+4, r19	; 0x04
     3ea:	2b 83       	std	Y+3, r18	; 0x03
     3ec:	2b 81       	ldd	r18, Y+3	; 0x03
     3ee:	3c 81       	ldd	r19, Y+4	; 0x04
     3f0:	42 e0       	ldi	r20, 0x02	; 2
     3f2:	28 35       	cpi	r18, 0x58	; 88
     3f4:	34 07       	cpc	r19, r20
     3f6:	a4 f3       	brlt	.-24     	; 0x3e0 <delay+0x18>
#define LCD_RS_OFF		(EX_CLCD_CONTROL=(clcdControl &= ~0x01))

void
delay(int n)
{
	for(volatile int i = 0; i < n; i++)	{
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	3a 81       	ldd	r19, Y+2	; 0x02
     3fc:	2f 5f       	subi	r18, 0xFF	; 255
     3fe:	3f 4f       	sbci	r19, 0xFF	; 255
     400:	3a 83       	std	Y+2, r19	; 0x02
     402:	29 83       	std	Y+1, r18	; 0x01
     404:	29 81       	ldd	r18, Y+1	; 0x01
     406:	3a 81       	ldd	r19, Y+2	; 0x02
     408:	28 17       	cp	r18, r24
     40a:	39 07       	cpc	r19, r25
     40c:	34 f3       	brlt	.-52     	; 0x3da <delay+0x12>
		for(volatile int j = 0; j<600; j++);
	}
}
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	cf 91       	pop	r28
     418:	df 91       	pop	r29
     41a:	08 95       	ret

0000041c <delay2>:

void
delay2(int n)
{
     41c:	df 93       	push	r29
     41e:	cf 93       	push	r28
     420:	00 d0       	rcall	.+0      	; 0x422 <delay2+0x6>
     422:	00 d0       	rcall	.+0      	; 0x424 <delay2+0x8>
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
    for(volatile int i = 0; i < n; i++) {
     428:	1a 82       	std	Y+2, r1	; 0x02
     42a:	19 82       	std	Y+1, r1	; 0x01
     42c:	14 c0       	rjmp	.+40     	; 0x456 <delay2+0x3a>
	   for(volatile int j = 0; j < 6; j++);
     42e:	1c 82       	std	Y+4, r1	; 0x04
     430:	1b 82       	std	Y+3, r1	; 0x03
     432:	06 c0       	rjmp	.+12     	; 0x440 <delay2+0x24>
     434:	2b 81       	ldd	r18, Y+3	; 0x03
     436:	3c 81       	ldd	r19, Y+4	; 0x04
     438:	2f 5f       	subi	r18, 0xFF	; 255
     43a:	3f 4f       	sbci	r19, 0xFF	; 255
     43c:	3c 83       	std	Y+4, r19	; 0x04
     43e:	2b 83       	std	Y+3, r18	; 0x03
     440:	2b 81       	ldd	r18, Y+3	; 0x03
     442:	3c 81       	ldd	r19, Y+4	; 0x04
     444:	26 30       	cpi	r18, 0x06	; 6
     446:	31 05       	cpc	r19, r1
     448:	ac f3       	brlt	.-22     	; 0x434 <delay2+0x18>
}

void
delay2(int n)
{
    for(volatile int i = 0; i < n; i++) {
     44a:	29 81       	ldd	r18, Y+1	; 0x01
     44c:	3a 81       	ldd	r19, Y+2	; 0x02
     44e:	2f 5f       	subi	r18, 0xFF	; 255
     450:	3f 4f       	sbci	r19, 0xFF	; 255
     452:	3a 83       	std	Y+2, r19	; 0x02
     454:	29 83       	std	Y+1, r18	; 0x01
     456:	29 81       	ldd	r18, Y+1	; 0x01
     458:	3a 81       	ldd	r19, Y+2	; 0x02
     45a:	28 17       	cp	r18, r24
     45c:	39 07       	cpc	r19, r25
     45e:	3c f3       	brlt	.-50     	; 0x42e <delay2+0x12>
	   for(volatile int j = 0; j < 6; j++);
    }
}
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <writeCommand>:
void
writeCommand(char value)
{
     46e:	0f 93       	push	r16
     470:	1f 93       	push	r17
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	08 2f       	mov	r16, r24
    LCD_EN_OFF;
     478:	10 91 72 05 	lds	r17, 0x0572
     47c:	81 2f       	mov	r24, r17
     47e:	8b 7f       	andi	r24, 0xFB	; 251
     480:	c1 e0       	ldi	r28, 0x01	; 1
     482:	d0 e8       	ldi	r29, 0x80	; 128
     484:	88 83       	st	Y, r24
	delay2(1);
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_RS_OFF;
     48e:	81 2f       	mov	r24, r17
     490:	8a 7f       	andi	r24, 0xFA	; 250
     492:	88 83       	st	Y, r24
	delay2(1);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_RW_OFF;
     49c:	18 7f       	andi	r17, 0xF8	; 248
     49e:	18 83       	st	Y, r17
	delay2(1);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_EN_ON;
     4a8:	14 60       	ori	r17, 0x04	; 4
     4aa:	18 83       	st	Y, r17
	delay2(1);
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	EX_CLCD_DATA=value;
     4b4:	00 93 00 80 	sts	0x8000, r16
	delay2(1);
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_EN_OFF;
     4c0:	1b 7f       	andi	r17, 0xFB	; 251
     4c2:	10 93 72 05 	sts	0x0572, r17
     4c6:	18 83       	st	Y, r17
	delay2(1);
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>

}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <writeData>:

void
writeData(char value)
{
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	08 2f       	mov	r16, r24
    LCD_EN_OFF;
     4e4:	10 91 72 05 	lds	r17, 0x0572
     4e8:	1b 7f       	andi	r17, 0xFB	; 251
     4ea:	c1 e0       	ldi	r28, 0x01	; 1
     4ec:	d0 e8       	ldi	r29, 0x80	; 128
     4ee:	18 83       	st	Y, r17
	delay2(1);
     4f0:	81 e0       	ldi	r24, 0x01	; 1
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_RS_ON;
     4f8:	11 60       	ori	r17, 0x01	; 1
     4fa:	18 83       	st	Y, r17
	delay2(1);
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_RW_OFF;
     504:	1d 7f       	andi	r17, 0xFD	; 253
     506:	18 83       	st	Y, r17
	delay2(1);
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_EN_ON;
     510:	14 60       	ori	r17, 0x04	; 4
     512:	18 83       	st	Y, r17
	delay2(1);
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	EX_CLCD_DATA = value;
     51c:	00 93 00 80 	sts	0x8000, r16
	delay2(1);
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	LCD_EN_OFF;
     528:	1b 7f       	andi	r17, 0xFB	; 251
     52a:	10 93 72 05 	sts	0x0572, r17
     52e:	18 83       	st	Y, r17
	delay2(1);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <initLcd>:
void
initLcd(void)
{
    writeCommand(0x38);
     542:	88 e3       	ldi	r24, 0x38	; 56
     544:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
	writeCommand(0x0e);
     548:	8e e0       	ldi	r24, 0x0E	; 14
     54a:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
	writeCommand(0x06);
     54e:	86 e0       	ldi	r24, 0x06	; 6
     550:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
	writeCommand(0x01);
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
	delay2(100);
     55a:	84 e6       	ldi	r24, 0x64	; 100
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
	writeCommand(0x02);
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
	delay2(100);
     568:	84 e6       	ldi	r24, 0x64	; 100
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 0e 02 	call	0x41c	; 0x41c <delay2>
}
     570:	08 95       	ret

00000572 <writeString>:
void
writeString(char *str)
{
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	e8 2e       	mov	r14, r24
     57c:	e7 01       	movw	r28, r14
     57e:	7e 01       	movw	r14, r28
     580:	f9 2e       	mov	r15, r25
     582:	e7 01       	movw	r28, r14
    while(*str)
     584:	02 c0       	rjmp	.+4      	; 0x58a <writeString+0x18>
	    writeData(*str++);
     586:	0e 94 6d 02 	call	0x4da	; 0x4da <writeData>
	delay2(100);
}
void
writeString(char *str)
{
    while(*str)
     58a:	89 91       	ld	r24, Y+
     58c:	88 23       	and	r24, r24
     58e:	d9 f7       	brne	.-10     	; 0x586 <writeString+0x14>
	    writeData(*str++);
}
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	ff 90       	pop	r15
     596:	ef 90       	pop	r14
     598:	08 95       	ret

0000059a <gotoLcdXY>:
void
gotoLcdXY(unsigned char x, unsigned char y)
{
    switch(y){
     59a:	61 30       	cpi	r22, 0x01	; 1
     59c:	19 f0       	breq	.+6      	; 0x5a4 <gotoLcdXY+0xa>
     59e:	62 30       	cpi	r22, 0x02	; 2
     5a0:	41 f4       	brne	.+16     	; 0x5b2 <gotoLcdXY+0x18>
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <gotoLcdXY+0x12>
	     case 1:
		     writeCommand(0x80 + x -1);
     5a4:	81 58       	subi	r24, 0x81	; 129
     5a6:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
			 break;
     5aa:	08 95       	ret
         case 2:
		     writeCommand(0xc0 + x -1);
     5ac:	81 54       	subi	r24, 0x41	; 65
     5ae:	0e 94 37 02 	call	0x46e	; 0x46e <writeCommand>
     5b2:	08 95       	ret

000005b4 <printLcd>:
			 break;
	 }
}
void
printLcd(int row, int col, char *str)
{
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	98 2f       	mov	r25, r24
     5ba:	86 2f       	mov	r24, r22
     5bc:	ea 01       	movw	r28, r20
    gotoLcdXY(col, row);
     5be:	69 2f       	mov	r22, r25
     5c0:	0e 94 cd 02 	call	0x59a	; 0x59a <gotoLcdXY>
	writeString(str);
     5c4:	ce 01       	movw	r24, r28
     5c6:	0e 94 b9 02 	call	0x572	; 0x572 <writeString>
	  

}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <__vector_30>:
	UBRR1H = 0x00;
	UCSR1B = 0xb8;
}

ISR(USART1_RX_vect)
{
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	0b b6       	in	r0, 0x3b	; 59
     5da:	0f 92       	push	r0
     5dc:	11 24       	eor	r1, r1
     5de:	2f 93       	push	r18
     5e0:	3f 93       	push	r19
     5e2:	4f 93       	push	r20
     5e4:	5f 93       	push	r21
     5e6:	6f 93       	push	r22
     5e8:	7f 93       	push	r23
     5ea:	8f 93       	push	r24
     5ec:	9f 93       	push	r25
     5ee:	af 93       	push	r26
     5f0:	bf 93       	push	r27
     5f2:	ef 93       	push	r30
     5f4:	ff 93       	push	r31
   if((rxHead + 1) % BUFFSIZE != rxTail) {
     5f6:	20 91 6e 05 	lds	r18, 0x056E
     5fa:	30 91 6f 05 	lds	r19, 0x056F
     5fe:	c9 01       	movw	r24, r18
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	8f 77       	andi	r24, 0x7F	; 127
     604:	90 70       	andi	r25, 0x00	; 0
     606:	40 91 70 05 	lds	r20, 0x0570
     60a:	50 91 71 05 	lds	r21, 0x0571
     60e:	84 17       	cp	r24, r20
     610:	95 07       	cpc	r25, r21
     612:	51 f0       	breq	.+20     	; 0x628 <__vector_30+0x58>
      rxBuff[rxHead] = UDR1;
     614:	40 91 9c 00 	lds	r20, 0x009C
     618:	25 5e       	subi	r18, 0xE5	; 229
     61a:	39 4f       	sbci	r19, 0xF9	; 249
     61c:	f9 01       	movw	r30, r18
     61e:	40 83       	st	Z, r20
	  rxHead = (rxHead + 1) % BUFFSIZE;
     620:	90 93 6f 05 	sts	0x056F, r25
     624:	80 93 6e 05 	sts	0x056E, r24
   }
#ifdef _UART
   editCharLcd();
     628:	0e 94 14 08 	call	0x1028	; 0x1028 <editCharLcd>
#endif
}
     62c:	ff 91       	pop	r31
     62e:	ef 91       	pop	r30
     630:	bf 91       	pop	r27
     632:	af 91       	pop	r26
     634:	9f 91       	pop	r25
     636:	8f 91       	pop	r24
     638:	7f 91       	pop	r23
     63a:	6f 91       	pop	r22
     63c:	5f 91       	pop	r21
     63e:	4f 91       	pop	r20
     640:	3f 91       	pop	r19
     642:	2f 91       	pop	r18
     644:	0f 90       	pop	r0
     646:	0b be       	out	0x3b, r0	; 59
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <__vector_31>:
ISR(USART1_UDRE_vect)
{
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	0b b6       	in	r0, 0x3b	; 59
     65c:	0f 92       	push	r0
     65e:	11 24       	eor	r1, r1
     660:	2f 93       	push	r18
     662:	3f 93       	push	r19
     664:	8f 93       	push	r24
     666:	9f 93       	push	r25
     668:	ef 93       	push	r30
     66a:	ff 93       	push	r31
   if(txHead != txTail){
     66c:	80 91 6c 05 	lds	r24, 0x056C
     670:	90 91 6d 05 	lds	r25, 0x056D
     674:	20 91 6a 05 	lds	r18, 0x056A
     678:	30 91 6b 05 	lds	r19, 0x056B
     67c:	28 17       	cp	r18, r24
     67e:	39 07       	cpc	r19, r25
     680:	69 f0       	breq	.+26     	; 0x69c <__vector_31+0x4a>
      UDR1 = txBuff[txTail];
     682:	fc 01       	movw	r30, r24
     684:	e5 56       	subi	r30, 0x65	; 101
     686:	fa 4f       	sbci	r31, 0xFA	; 250
     688:	20 81       	ld	r18, Z
     68a:	20 93 9c 00 	sts	0x009C, r18
	  txTail = (txTail + 1) % BUFFSIZE;
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	8f 77       	andi	r24, 0x7F	; 127
     692:	90 70       	andi	r25, 0x00	; 0
     694:	90 93 6d 05 	sts	0x056D, r25
     698:	80 93 6c 05 	sts	0x056C, r24
   }
}
     69c:	ff 91       	pop	r31
     69e:	ef 91       	pop	r30
     6a0:	9f 91       	pop	r25
     6a2:	8f 91       	pop	r24
     6a4:	3f 91       	pop	r19
     6a6:	2f 91       	pop	r18
     6a8:	0f 90       	pop	r0
     6aa:	0b be       	out	0x3b, r0	; 59
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <peekChar>:
   
}
int
peekChar(void)
{
   if(rxTail == rxHead) return -1;
     6b6:	80 91 70 05 	lds	r24, 0x0570
     6ba:	90 91 71 05 	lds	r25, 0x0571
     6be:	20 91 6e 05 	lds	r18, 0x056E
     6c2:	30 91 6f 05 	lds	r19, 0x056F
     6c6:	82 17       	cp	r24, r18
     6c8:	93 07       	cpc	r25, r19
     6ca:	31 f0       	breq	.+12     	; 0x6d8 <peekChar+0x22>
   return rxBuff[rxTail];
     6cc:	85 5e       	subi	r24, 0xE5	; 229
     6ce:	99 4f       	sbci	r25, 0xF9	; 249
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 81       	ld	r18, Z
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <peekChar+0x26>
   
}
int
peekChar(void)
{
   if(rxTail == rxHead) return -1;
     6d8:	2f ef       	ldi	r18, 0xFF	; 255
     6da:	3f ef       	ldi	r19, 0xFF	; 255
   return rxBuff[rxTail];

}
     6dc:	c9 01       	movw	r24, r18
     6de:	08 95       	ret

000006e0 <getChar>:
int
getChar(void)
{
   int c;
   if(rxTail == rxHead){
     6e0:	80 91 70 05 	lds	r24, 0x0570
     6e4:	90 91 71 05 	lds	r25, 0x0571
     6e8:	20 91 6e 05 	lds	r18, 0x056E
     6ec:	30 91 6f 05 	lds	r19, 0x056F
     6f0:	82 17       	cp	r24, r18
     6f2:	93 07       	cpc	r25, r19
     6f4:	39 f4       	brne	.+14     	; 0x704 <getChar+0x24>
      while(!(UCSR1A & (1 << RXC1)));
     6f6:	80 91 9b 00 	lds	r24, 0x009B
     6fa:	87 ff       	sbrs	r24, 7
     6fc:	fc cf       	rjmp	.-8      	; 0x6f6 <getChar+0x16>
      return UDR1;}
     6fe:	80 91 9c 00 	lds	r24, 0x009C
     702:	1f c0       	rjmp	.+62     	; 0x742 <getChar+0x62>
   c = rxBuff[rxTail];
     704:	85 5e       	subi	r24, 0xE5	; 229
     706:	99 4f       	sbci	r25, 0xF9	; 249
     708:	fc 01       	movw	r30, r24
     70a:	80 81       	ld	r24, Z
   ATOMIC(rxTail = (rxTail + 1) % BUFFSIZE);
     70c:	9f b7       	in	r25, 0x3f	; 63
     70e:	f8 94       	cli
     710:	20 91 70 05 	lds	r18, 0x0570
     714:	30 91 71 05 	lds	r19, 0x0571
     718:	2f 5f       	subi	r18, 0xFF	; 255
     71a:	3f 4f       	sbci	r19, 0xFF	; 255
     71c:	2f 77       	andi	r18, 0x7F	; 127
     71e:	30 70       	andi	r19, 0x00	; 0
     720:	30 93 71 05 	sts	0x0571, r19
     724:	20 93 70 05 	sts	0x0570, r18
     728:	20 91 6a 05 	lds	r18, 0x056A
     72c:	30 91 6b 05 	lds	r19, 0x056B
     730:	2f 5f       	subi	r18, 0xFF	; 255
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	2f 77       	andi	r18, 0x7F	; 127
     736:	30 70       	andi	r19, 0x00	; 0
     738:	30 93 6b 05 	sts	0x056B, r19
     73c:	20 93 6a 05 	sts	0x056A, r18
     740:	9f bf       	out	0x3f, r25	; 63
   return c;

}
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	08 95       	ret

00000746 <initDevices>:
void
initDevices(void)
{
     746:	1f 93       	push	r17
	cli();
     748:	f8 94       	cli



static void initPorts(void)
{
	DDRG = 0x10;
     74a:	80 e1       	ldi	r24, 0x10	; 16
     74c:	80 93 64 00 	sts	0x0064, r24
}

static void initTimer0(void)
{
	TCCR0 = 0x00;
     750:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x06; ///250개의 카운터
     752:	86 e0       	ldi	r24, 0x06	; 6
     754:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x04; /// 64분의1            1kHz
     756:	14 e0       	ldi	r17, 0x04	; 4
     758:	13 bf       	out	0x33, r17	; 51
}

static void initTimer1(void)
{
	TCCR1B = 0x00;
     75a:	1e bc       	out	0x2e, r1	; 46
	TCNT1L = 0x00;
     75c:	1c bc       	out	0x2c, r1	; 44
	TCNT1H = 0x00;
     75e:	1d bc       	out	0x2d, r1	; 45
	TCCR1B = 0x01;	///타이머 0과 1을 쓰기위해서
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	9e bd       	out	0x2e, r25	; 46
}

static void initTimer2(void)
{
    TCCR2=0x00;
     764:	15 bc       	out	0x25, r1	; 37
	OCR2 =0x13;
     766:	93 e1       	ldi	r25, 0x13	; 19
     768:	93 bd       	out	0x23, r25	; 35
	TCNT2=0x00;
     76a:	14 bc       	out	0x24, r1	; 36
	TCCR2=0x0a;
     76c:	9a e0       	ldi	r25, 0x0A	; 10
     76e:	95 bd       	out	0x25, r25	; 37
}

static void initTimer3(void)
{
	TCCR3B = 0x00;
     770:	ea e8       	ldi	r30, 0x8A	; 138
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	10 82       	st	Z, r1
	TCNT3H = 0xc2;
     776:	92 ec       	ldi	r25, 0xC2	; 194
     778:	90 93 89 00 	sts	0x0089, r25
	TCNT3L = 0xf7;
     77c:	97 ef       	ldi	r25, 0xF7	; 247
     77e:	90 93 88 00 	sts	0x0088, r25
	TCCR3B = 0x05;
     782:	95 e0       	ldi	r25, 0x05	; 5
     784:	90 83       	st	Z, r25
unsigned int txHead = 0, txTail = 0, rxHead = 0, rxTail = 0;
unsigned char txBuff[BUFFSIZE], rxBuff[BUFFSIZE];
static void
initUart1(void)
{
    UCSR1B = 0x00;
     786:	ea e9       	ldi	r30, 0x9A	; 154
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	10 82       	st	Z, r1
	UCSR1C = 0x06;
     78c:	80 93 9d 00 	sts	0x009D, r24
	UBRR1L = 0x67;
     790:	87 e6       	ldi	r24, 0x67	; 103
     792:	80 93 99 00 	sts	0x0099, r24
	UBRR1H = 0x00;
     796:	10 92 98 00 	sts	0x0098, r1
	UCSR1B = 0xb8;
     79a:	88 eb       	ldi	r24, 0xB8	; 184
     79c:	80 83       	st	Z, r24
	initTimer0();
	initTimer1();
	initTimer2();
	initTimer3();
	initUart1();
	fdevopen(putChar, 0);
     79e:	87 e6       	ldi	r24, 0x67	; 103
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	0e 94 3b 09 	call	0x1276	; 0x1276 <fdevopen>
	MCUCR = 0x80;
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	85 bf       	out	0x35, r24	; 53
	TIMSK = 0x85;
     7ae:	85 e8       	ldi	r24, 0x85	; 133
     7b0:	87 bf       	out	0x37, r24	; 55
	ETIMSK = 0x04;
     7b2:	10 93 7d 00 	sts	0x007D, r17
	sei();
     7b6:	78 94       	sei
}
     7b8:	1f 91       	pop	r17
     7ba:	08 95       	ret

000007bc <setMotorSpeed>:

void
setMotorSpeed(void)
{

	 sm1Speed = 1;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 01 01 	sts	0x0101, r25
     7c4:	80 93 00 01 	sts	0x0100, r24
	 sm1MaxCount = smMaxCount[ds];
     7c8:	e0 91 5d 05 	lds	r30, 0x055D
     7cc:	f0 91 5e 05 	lds	r31, 0x055E
     7d0:	ee 0f       	add	r30, r30
     7d2:	ff 1f       	adc	r31, r31
     7d4:	ea 5b       	subi	r30, 0xBA	; 186
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	80 81       	ld	r24, Z
     7da:	91 81       	ldd	r25, Z+1	; 0x01
     7dc:	90 93 51 01 	sts	0x0151, r25
     7e0:	80 93 50 01 	sts	0x0150, r24
}
     7e4:	08 95       	ret

000007e6 <__vector_29>:
#ifdef _STEPPER
	if(on && (ds > 0) && !stop) stepMotor();
#endif
}
ISR(TIMER3_OVF_vect)
{
     7e6:	1f 92       	push	r1
     7e8:	0f 92       	push	r0
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	0f 92       	push	r0
     7ee:	0b b6       	in	r0, 0x3b	; 59
     7f0:	0f 92       	push	r0
     7f2:	11 24       	eor	r1, r1
     7f4:	2f 93       	push	r18
     7f6:	3f 93       	push	r19
     7f8:	4f 93       	push	r20
     7fa:	5f 93       	push	r21
     7fc:	6f 93       	push	r22
     7fe:	7f 93       	push	r23
     800:	8f 93       	push	r24
     802:	9f 93       	push	r25
     804:	af 93       	push	r26
     806:	bf 93       	push	r27
     808:	ef 93       	push	r30
     80a:	ff 93       	push	r31
	TCNT3H = 0xc2;
     80c:	82 ec       	ldi	r24, 0xC2	; 194
     80e:	80 93 89 00 	sts	0x0089, r24
	TCNT3L = 0xf7;
     812:	87 ef       	ldi	r24, 0xF7	; 247
     814:	80 93 88 00 	sts	0x0088, r24
#ifdef	_FND
	updateFndDigits();
     818:	0e 94 27 04 	call	0x84e	; 0x84e <updateFndDigits>
#endif
#ifdef _DOT_MATRIX
    turnDotMatrixPage();
     81c:	0e 94 9c 08 	call	0x1138	; 0x1138 <turnDotMatrixPage>
#endif
#ifdef _CLCD
    updateClock();
     820:	0e 94 a0 05 	call	0xb40	; 0xb40 <updateClock>
#endif
#ifdef _STEPPER
    setMotorSpeed();
     824:	0e 94 de 03 	call	0x7bc	; 0x7bc <setMotorSpeed>
#endif
}
     828:	ff 91       	pop	r31
     82a:	ef 91       	pop	r30
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0b be       	out	0x3b, r0	; 59
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <updateFndDigits>:


void
updateFndDigits(void)
{
	if(on && (ds != 0)){
     84e:	80 91 5c 05 	lds	r24, 0x055C
     852:	88 23       	and	r24, r24
     854:	b9 f0       	breq	.+46     	; 0x884 <updateFndDigits+0x36>
     856:	80 91 5d 05 	lds	r24, 0x055D
     85a:	90 91 5e 05 	lds	r25, 0x055E
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	c1 f0       	breq	.+48     	; 0x892 <updateFndDigits+0x44>
	   if(!stop) fndValue++;
     862:	80 91 63 05 	lds	r24, 0x0563
     866:	88 23       	and	r24, r24
     868:	49 f4       	brne	.+18     	; 0x87c <updateFndDigits+0x2e>
     86a:	80 91 7a 05 	lds	r24, 0x057A
     86e:	90 91 7b 05 	lds	r25, 0x057B
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	90 93 7b 05 	sts	0x057B, r25
     878:	80 93 7a 05 	sts	0x057A, r24
	   flush = 1;}
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	80 93 7c 05 	sts	0x057C, r24
     882:	08 95       	ret
    if(!on) {fndValue = 0; flush = 1;}
     884:	10 92 7b 05 	sts	0x057B, r1
     888:	10 92 7a 05 	sts	0x057A, r1
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 7c 05 	sts	0x057C, r24
     892:	08 95       	ret

00000894 <flushFndDigit>:
    

}
void
flushFndDigit(void)
{   if(!flush) return;
     894:	80 91 7c 05 	lds	r24, 0x057C
     898:	88 23       	and	r24, r24
     89a:	49 f1       	breq	.+82     	; 0x8ee <flushFndDigit+0x5a>
    flush =0;
     89c:	10 92 7c 05 	sts	0x057C, r1

    fndDigit[0] = fndValue % 3600 / 600; 
     8a0:	20 91 7a 05 	lds	r18, 0x057A
     8a4:	30 91 7b 05 	lds	r19, 0x057B
     8a8:	c9 01       	movw	r24, r18
     8aa:	60 e1       	ldi	r22, 0x10	; 16
     8ac:	7e e0       	ldi	r23, 0x0E	; 14
     8ae:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
     8b2:	68 e5       	ldi	r22, 0x58	; 88
     8b4:	72 e0       	ldi	r23, 0x02	; 2
     8b6:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
     8ba:	60 93 64 05 	sts	0x0564, r22
	fndDigit[1] = fndValue % 3600 % 600 / 60; 
     8be:	ec e3       	ldi	r30, 0x3C	; 60
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	bf 01       	movw	r22, r30
     8c4:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
     8c8:	60 93 65 05 	sts	0x0565, r22
	fndDigit[2] = fndValue % 60 / 10; 
     8cc:	c9 01       	movw	r24, r18
     8ce:	bf 01       	movw	r22, r30
     8d0:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
     8d4:	ea e0       	ldi	r30, 0x0A	; 10
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	bf 01       	movw	r22, r30
     8da:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
     8de:	60 93 66 05 	sts	0x0566, r22
	fndDigit[3] = fndValue % 10; 
     8e2:	c9 01       	movw	r24, r18
     8e4:	bf 01       	movw	r22, r30
     8e6:	0e 94 14 09 	call	0x1228	; 0x1228 <__udivmodhi4>
     8ea:	80 93 67 05 	sts	0x0567, r24
     8ee:	08 95       	ret

000008f0 <fndCountUp>:
	
}
void
fndCountUp(int incr)
{
	fndValue += incr;
     8f0:	20 91 7a 05 	lds	r18, 0x057A
     8f4:	30 91 7b 05 	lds	r19, 0x057B
     8f8:	28 0f       	add	r18, r24
     8fa:	39 1f       	adc	r19, r25
     8fc:	30 93 7b 05 	sts	0x057B, r19
     900:	20 93 7a 05 	sts	0x057A, r18
}
     904:	08 95       	ret

00000906 <stop1>:
	if(!on) test();
}

void
stop1(void)
{
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
    printLcd(1, 1, t);
     90a:	c2 e0       	ldi	r28, 0x02	; 2
     90c:	d1 e0       	ldi	r29, 0x01	; 1
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	61 e0       	ldi	r22, 0x01	; 1
     914:	70 e0       	ldi	r23, 0x00	; 0
     916:	ae 01       	movw	r20, r28
     918:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	printLcd(2, 1, t);
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	61 e0       	ldi	r22, 0x01	; 1
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	ae 01       	movw	r20, r28
     926:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	printLcd(1, 1, "Stop");
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	61 e0       	ldi	r22, 0x01	; 1
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	4e e6       	ldi	r20, 0x6E	; 110
     934:	51 e0       	ldi	r21, 0x01	; 1
     936:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
}
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <test>:
void
test(void)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
    printLcd(1, 1, t);
     944:	c2 e0       	ldi	r28, 0x02	; 2
     946:	d1 e0       	ldi	r29, 0x01	; 1
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	ae 01       	movw	r20, r28
     952:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	printLcd(2, 1, t);
     956:	82 e0       	ldi	r24, 0x02	; 2
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	ae 01       	movw	r20, r28
     960:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <Mes>:


void
Mes(void)
{
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
	int temp = 0;
	initLcd();
     97a:	0e 94 a1 02 	call	0x542	; 0x542 <initLcd>
	for(int index_i = 1; index_i < 3; index_i++)
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	e9 2e       	mov	r14, r25
     982:	f1 2c       	mov	r15, r1


void
Mes(void)
{
	int temp = 0;
     984:	c0 e0       	ldi	r28, 0x00	; 0
     986:	d0 e0       	ldi	r29, 0x00	; 0
     988:	15 c0       	rjmp	.+42     	; 0x9b4 <Mes+0x4a>
	initLcd();
	for(int index_i = 1; index_i < 3; index_i++)
  	{
		for(int index_j = 1; index_j <= 16; index_j++)
		{
			gotoLcdXY(index_j, index_i);
     98a:	80 2f       	mov	r24, r16
     98c:	6e 2d       	mov	r22, r14
     98e:	0e 94 cd 02 	call	0x59a	; 0x59a <gotoLcdXY>
			writeData(m[temp++]);
     992:	f6 01       	movw	r30, r12
     994:	81 91       	ld	r24, Z+
     996:	6f 01       	movw	r12, r30
     998:	0e 94 6d 02 	call	0x4da	; 0x4da <writeData>
{
	int temp = 0;
	initLcd();
	for(int index_i = 1; index_i < 3; index_i++)
  	{
		for(int index_j = 1; index_j <= 16; index_j++)
     99c:	0f 5f       	subi	r16, 0xFF	; 255
     99e:	1f 4f       	sbci	r17, 0xFF	; 255
     9a0:	01 31       	cpi	r16, 0x11	; 17
     9a2:	11 05       	cpc	r17, r1
     9a4:	91 f7       	brne	.-28     	; 0x98a <Mes+0x20>
     9a6:	60 96       	adiw	r28, 0x10	; 16
void
Mes(void)
{
	int temp = 0;
	initLcd();
	for(int index_i = 1; index_i < 3; index_i++)
     9a8:	08 94       	sec
     9aa:	e1 1c       	adc	r14, r1
     9ac:	f1 1c       	adc	r15, r1
     9ae:	c0 32       	cpi	r28, 0x20	; 32
     9b0:	d1 05       	cpc	r29, r1
     9b2:	49 f0       	breq	.+18     	; 0x9c6 <Mes+0x5c>
	printLcd(2, 1, t);
}


void
Mes(void)
     9b4:	85 e4       	ldi	r24, 0x45	; 69
     9b6:	c8 2e       	mov	r12, r24
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	d8 2e       	mov	r13, r24
     9bc:	cc 0e       	add	r12, r28
     9be:	dd 1e       	adc	r13, r29
     9c0:	01 e0       	ldi	r16, 0x01	; 1
     9c2:	10 e0       	ldi	r17, 0x00	; 0
     9c4:	e2 cf       	rjmp	.-60     	; 0x98a <Mes+0x20>
   writeData(m[29]);
   gotoLcdXY(15, 2);
   writeData(m[30]);
   gotoLcdXY(16, 2);
   writeData(m[31]); */
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	08 95       	ret

000009d8 <flushClock>:


void
flushClock(void)
{
    if(!flush) return;
     9d8:	80 91 7d 05 	lds	r24, 0x057D
     9dc:	88 23       	and	r24, r24
     9de:	09 f4       	brne	.+2      	; 0x9e2 <flushClock+0xa>
     9e0:	ae c0       	rjmp	.+348    	; 0xb3e <flushClock+0x166>
	flush = 0;
     9e2:	10 92 7d 05 	sts	0x057D, r1
	if(on && (!Message)){
     9e6:	80 91 5c 05 	lds	r24, 0x055C
     9ea:	88 23       	and	r24, r24
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <flushClock+0x18>
     9ee:	a7 c0       	rjmp	.+334    	; 0xb3e <flushClock+0x166>
     9f0:	80 91 5f 05 	lds	r24, 0x055F
     9f4:	88 23       	and	r24, r24
     9f6:	09 f0       	breq	.+2      	; 0x9fa <flushClock+0x22>
     9f8:	a2 c0       	rjmp	.+324    	; 0xb3e <flushClock+0x166>
		printLcd(1, 1, t);
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	42 e0       	ldi	r20, 0x02	; 2
     a04:	51 e0       	ldi	r21, 0x01	; 1
     a06:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	  	printLcd(1, 1, "go run together!");
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	43 e7       	ldi	r20, 0x73	; 115
     a14:	51 e0       	ldi	r21, 0x01	; 1
     a16:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	 	printLcd(2, 1, t);
     a1a:	82 e0       	ldi	r24, 0x02	; 2
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	42 e0       	ldi	r20, 0x02	; 2
     a24:	51 e0       	ldi	r21, 0x01	; 1
     a26:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
		if(Speaker) {
     a2a:	80 91 60 05 	lds	r24, 0x0560
     a2e:	88 23       	and	r24, r24
     a30:	09 f4       	brne	.+2      	; 0xa34 <flushClock+0x5c>
     a32:	6d c0       	rjmp	.+218    	; 0xb0e <flushClock+0x136>
			switch(music) {
     a34:	80 91 62 05 	lds	r24, 0x0562
     a38:	82 30       	cpi	r24, 0x02	; 2
     a3a:	19 f1       	breq	.+70     	; 0xa82 <flushClock+0xaa>
     a3c:	83 30       	cpi	r24, 0x03	; 3
     a3e:	20 f4       	brcc	.+8      	; 0xa48 <flushClock+0x70>
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	09 f0       	breq	.+2      	; 0xa46 <flushClock+0x6e>
     a44:	64 c0       	rjmp	.+200    	; 0xb0e <flushClock+0x136>
     a46:	06 c0       	rjmp	.+12     	; 0xa54 <flushClock+0x7c>
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	91 f1       	breq	.+100    	; 0xab0 <flushClock+0xd8>
     a4c:	84 30       	cpi	r24, 0x04	; 4
     a4e:	09 f0       	breq	.+2      	; 0xa52 <flushClock+0x7a>
     a50:	5e c0       	rjmp	.+188    	; 0xb0e <flushClock+0x136>
     a52:	45 c0       	rjmp	.+138    	; 0xade <flushClock+0x106>
	        	case 1: printLcd(1, 1, t); printLcd(2, 1, t); printLcd(1, 1, "Sound of Music"); break;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	42 e0       	ldi	r20, 0x02	; 2
     a5e:	51 e0       	ldi	r21, 0x01	; 1
     a60:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     a64:	82 e0       	ldi	r24, 0x02	; 2
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	42 e0       	ldi	r20, 0x02	; 2
     a6e:	51 e0       	ldi	r21, 0x01	; 1
     a70:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	44 e8       	ldi	r20, 0x84	; 132
     a7e:	51 e0       	ldi	r21, 0x01	; 1
     a80:	44 c0       	rjmp	.+136    	; 0xb0a <flushClock+0x132>
				case 2: printLcd(1, 1, t); printLcd(2, 1, t); printLcd(1, 1, "City of Star"); break;
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	42 e0       	ldi	r20, 0x02	; 2
     a8c:	51 e0       	ldi	r21, 0x01	; 1
     a8e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	61 e0       	ldi	r22, 0x01	; 1
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	42 e0       	ldi	r20, 0x02	; 2
     a9c:	51 e0       	ldi	r21, 0x01	; 1
     a9e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     aa2:	81 e0       	ldi	r24, 0x01	; 1
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	61 e0       	ldi	r22, 0x01	; 1
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	43 e9       	ldi	r20, 0x93	; 147
     aac:	51 e0       	ldi	r21, 0x01	; 1
     aae:	2d c0       	rjmp	.+90     	; 0xb0a <flushClock+0x132>
				case 3: printLcd(1, 1, t); printLcd(2, 1, t); printLcd(1, 4, "Power up!"); break; 
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	61 e0       	ldi	r22, 0x01	; 1
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	42 e0       	ldi	r20, 0x02	; 2
     aba:	51 e0       	ldi	r21, 0x01	; 1
     abc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     ac0:	82 e0       	ldi	r24, 0x02	; 2
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	42 e0       	ldi	r20, 0x02	; 2
     aca:	51 e0       	ldi	r21, 0x01	; 1
     acc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	64 e0       	ldi	r22, 0x04	; 4
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	40 ea       	ldi	r20, 0xA0	; 160
     ada:	51 e0       	ldi	r21, 0x01	; 1
     adc:	16 c0       	rjmp	.+44     	; 0xb0a <flushClock+0x132>
				case 4: printLcd(1, 1, t); printLcd(2, 1, t); printLcd(1, 2, "London Bridge"); break;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	42 e0       	ldi	r20, 0x02	; 2
     ae8:	51 e0       	ldi	r21, 0x01	; 1
     aea:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	42 e0       	ldi	r20, 0x02	; 2
     af8:	51 e0       	ldi	r21, 0x01	; 1
     afa:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	62 e0       	ldi	r22, 0x02	; 2
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	4a ea       	ldi	r20, 0xAA	; 170
     b08:	51 e0       	ldi	r21, 0x01	; 1
     b0a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
			}		 
		}
	if(reci) printLcd(2, 16, "M");
     b0e:	80 91 61 05 	lds	r24, 0x0561
     b12:	88 23       	and	r24, r24
     b14:	41 f0       	breq	.+16     	; 0xb26 <flushClock+0x14e>
     b16:	82 e0       	ldi	r24, 0x02	; 2
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	60 e1       	ldi	r22, 0x10	; 16
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	48 eb       	ldi	r20, 0xB8	; 184
     b20:	51 e0       	ldi	r21, 0x01	; 1
     b22:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	if(Message) printLcd(2, 16, " ");	  
     b26:	80 91 5f 05 	lds	r24, 0x055F
     b2a:	88 23       	and	r24, r24
     b2c:	41 f0       	breq	.+16     	; 0xb3e <flushClock+0x166>
     b2e:	82 e0       	ldi	r24, 0x02	; 2
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	60 e1       	ldi	r22, 0x10	; 16
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	4a eb       	ldi	r20, 0xBA	; 186
     b38:	51 e0       	ldi	r21, 0x01	; 1
     b3a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
     b3e:	08 95       	ret

00000b40 <updateClock>:
#endif
static unsigned char  	flush=0;
void
updateClock(void)
{
	flush=1;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 7d 05 	sts	0x057D, r24
	if(on) { 
     b46:	80 91 5c 05 	lds	r24, 0x055C
     b4a:	88 23       	and	r24, r24
     b4c:	d1 f0       	breq	.+52     	; 0xb82 <updateClock+0x42>
		flushClock();
     b4e:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <flushClock>
		if(Message) Mes();
     b52:	80 91 5f 05 	lds	r24, 0x055F
     b56:	88 23       	and	r24, r24
     b58:	11 f0       	breq	.+4      	; 0xb5e <updateClock+0x1e>
     b5a:	0e 94 b5 04 	call	0x96a	; 0x96a <Mes>
		if(stop) stop1();
     b5e:	80 91 63 05 	lds	r24, 0x0563
     b62:	88 23       	and	r24, r24
     b64:	11 f0       	breq	.+4      	; 0xb6a <updateClock+0x2a>
     b66:	0e 94 83 04 	call	0x906	; 0x906 <stop1>
		if(!stop) printLcd(2, 1, " ");
     b6a:	80 91 63 05 	lds	r24, 0x0563
     b6e:	88 23       	and	r24, r24
     b70:	41 f4       	brne	.+16     	; 0xb82 <updateClock+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	4a eb       	ldi	r20, 0xBA	; 186
     b7c:	51 e0       	ldi	r21, 0x01	; 1
     b7e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
	}
	gotoLcdXY(1, 2);
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	62 e0       	ldi	r22, 0x02	; 2
     b86:	0e 94 cd 02 	call	0x59a	; 0x59a <gotoLcdXY>
	if(!on) test();
     b8a:	80 91 5c 05 	lds	r24, 0x055C
     b8e:	88 23       	and	r24, r24
     b90:	11 f4       	brne	.+4      	; 0xb96 <updateClock+0x56>
     b92:	0e 94 a0 04 	call	0x940	; 0x940 <test>
     b96:	08 95       	ret

00000b98 <updateLed>:
unsigned char dir=1;
void
updateLed(void)
{

     if(!on) ledData=0x00;
     b98:	80 91 5c 05 	lds	r24, 0x055C
     b9c:	88 23       	and	r24, r24
     b9e:	21 f4       	brne	.+8      	; 0xba8 <updateLed+0x10>
     ba0:	10 92 bd 01 	sts	0x01BD, r1
     ba4:	10 92 bc 01 	sts	0x01BC, r1
	 EX_LED=ledData;
     ba8:	80 91 bc 01 	lds	r24, 0x01BC
     bac:	80 93 08 80 	sts	0x8008, r24
}
     bb0:	08 95       	ret

00000bb2 <onM>:

void
onM(void)
{
	 n1kHzCycles++;
     bb2:	80 91 7e 05 	lds	r24, 0x057E
     bb6:	8f 5f       	subi	r24, 0xFF	; 255
     bb8:	80 93 7e 05 	sts	0x057E, r24
	 EX_LED = ledData;
     bbc:	90 91 bc 01 	lds	r25, 0x01BC
     bc0:	90 93 08 80 	sts	0x8008, r25
	 if(n1kHzCycles > 200 && n1kHzCycles < 400) ledData = 0xff;
     bc4:	89 3c       	cpi	r24, 0xC9	; 201
     bc6:	38 f0       	brcs	.+14     	; 0xbd6 <onM+0x24>
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 bd 01 	sts	0x01BD, r25
     bd0:	80 93 bc 01 	sts	0x01BC, r24
     bd4:	08 95       	ret
	 else ledData = 0x00;
     bd6:	10 92 bd 01 	sts	0x01BD, r1
     bda:	10 92 bc 01 	sts	0x01BC, r1
     bde:	08 95       	ret

00000be0 <ledUpdate>:
}

void
ledUpdate(void)
{
    n1kHzCycles++;
     be0:	80 91 7e 05 	lds	r24, 0x057E
     be4:	8f 5f       	subi	r24, 0xFF	; 255
     be6:	80 93 7e 05 	sts	0x057E, r24
	EX_LED = ledData;
     bea:	80 91 bc 01 	lds	r24, 0x01BC
     bee:	80 93 08 80 	sts	0x8008, r24
			if(ledData == 0x01)
				dir = 1;
		}
	n1kHzCycles=0;
	}
}
     bf2:	08 95       	ret

00000bf4 <speedled>:

void speedled(void)

{
	char i;
	n1kHzCycles++;
     bf4:	80 91 7e 05 	lds	r24, 0x057E
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 7e 05 	sts	0x057E, r24
	EX_LED = ledData;
     bfe:	80 91 bc 01 	lds	r24, 0x01BC
     c02:	80 93 08 80 	sts	0x8008, r24
	if(reci == 0) ledData = 0x00;
     c06:	80 91 61 05 	lds	r24, 0x0561
     c0a:	88 23       	and	r24, r24
     c0c:	29 f4       	brne	.+10     	; 0xc18 <speedled+0x24>
     c0e:	10 92 bd 01 	sts	0x01BD, r1
     c12:	10 92 bc 01 	sts	0x01BC, r1
     c16:	08 95       	ret
	else if(reci == 1){
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	31 f4       	brne	.+12     	; 0xc28 <speedled+0x34>
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	90 93 bd 01 	sts	0x01BD, r25
     c24:	80 93 bc 01 	sts	0x01BC, r24
     c28:	08 95       	ret

00000c2a <playMusic>:
static unsigned char	chatter = 0;
static unsigned int		temm = 0;
void
playMusic(void)
{	
	chatter++;
     c2a:	90 91 80 05 	lds	r25, 0x0580
     c2e:	9f 5f       	subi	r25, 0xFF	; 255
	chatter %= 200;
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	98 3c       	cpi	r25, 0xC8	; 200
     c34:	08 f4       	brcc	.+2      	; 0xc38 <playMusic+0xe>
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	28 ec       	ldi	r18, 0xC8	; 200
     c3a:	82 9f       	mul	r24, r18
     c3c:	80 2d       	mov	r24, r0
     c3e:	11 24       	eor	r1, r1
     c40:	98 1b       	sub	r25, r24
     c42:	89 2f       	mov	r24, r25
     c44:	90 93 80 05 	sts	0x0580, r25
	if(PINB & 0x80 && !chatter) {
     c48:	b7 9b       	sbis	0x16, 7	; 22
     c4a:	3b c0       	rjmp	.+118    	; 0xcc2 <playMusic+0x98>
     c4c:	99 23       	and	r25, r25
     c4e:	c9 f5       	brne	.+114    	; 0xcc2 <playMusic+0x98>
	     
		 on = (on + 1) % 2;
     c50:	80 91 5c 05 	lds	r24, 0x055C
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	81 70       	andi	r24, 0x01	; 1
     c5a:	90 70       	andi	r25, 0x00	; 0
     c5c:	80 93 5c 05 	sts	0x055C, r24
		 
		 
		 if(Speaker) Speaker = 0;
     c60:	80 91 60 05 	lds	r24, 0x0560
     c64:	88 23       	and	r24, r24
     c66:	11 f0       	breq	.+4      	; 0xc6c <playMusic+0x42>
     c68:	10 92 60 05 	sts	0x0560, r1
		 if(ds) ds = 0;
     c6c:	80 91 5d 05 	lds	r24, 0x055D
     c70:	88 23       	and	r24, r24
     c72:	11 f0       	breq	.+4      	; 0xc78 <playMusic+0x4e>
     c74:	10 92 5d 05 	sts	0x055D, r1
		 if(reci) reci = 0;
     c78:	80 91 61 05 	lds	r24, 0x0561
     c7c:	88 23       	and	r24, r24
     c7e:	11 f0       	breq	.+4      	; 0xc84 <playMusic+0x5a>
     c80:	10 92 61 05 	sts	0x0561, r1
		 if(music) music = 0;
     c84:	80 91 62 05 	lds	r24, 0x0562
     c88:	88 23       	and	r24, r24
     c8a:	11 f0       	breq	.+4      	; 0xc90 <playMusic+0x66>
     c8c:	10 92 62 05 	sts	0x0562, r1
		 if(Message) Message = 0;
     c90:	80 91 5f 05 	lds	r24, 0x055F
     c94:	88 23       	and	r24, r24
     c96:	11 f0       	breq	.+4      	; 0xc9c <playMusic+0x72>
     c98:	10 92 5f 05 	sts	0x055F, r1
		 printLcd(1, 1, t);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	42 e0       	ldi	r20, 0x02	; 2
     ca6:	51 e0       	ldi	r21, 0x01	; 1
     ca8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
		 printLcd(1, 1, t);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	42 e0       	ldi	r20, 0x02	; 2
     cb6:	51 e0       	ldi	r21, 0x01	; 1
     cb8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
		 stop = 0;
     cbc:	10 92 63 05 	sts	0x0563, r1
     cc0:	ab c0       	rjmp	.+342    	; 0xe18 <playMusic+0x1ee>
		 
	}
	else if(PINB & 0x40 && !chatter) {
     cc2:	b6 9b       	sbis	0x16, 6	; 22
     cc4:	12 c0       	rjmp	.+36     	; 0xcea <playMusic+0xc0>
     cc6:	88 23       	and	r24, r24
     cc8:	81 f4       	brne	.+32     	; 0xcea <playMusic+0xc0>
		Message = (Message + 1) % 2;
     cca:	80 91 5f 05 	lds	r24, 0x055F
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	81 70       	andi	r24, 0x01	; 1
     cd4:	90 70       	andi	r25, 0x00	; 0
     cd6:	80 93 5f 05 	sts	0x055F, r24
        if(reci) reci = 0;
     cda:	80 91 61 05 	lds	r24, 0x0561
     cde:	88 23       	and	r24, r24
     ce0:	09 f4       	brne	.+2      	; 0xce4 <playMusic+0xba>
     ce2:	9a c0       	rjmp	.+308    	; 0xe18 <playMusic+0x1ee>
     ce4:	10 92 61 05 	sts	0x0561, r1
     ce8:	97 c0       	rjmp	.+302    	; 0xe18 <playMusic+0x1ee>
	}

	else if(PINB & 0x20) {
     cea:	b5 9b       	sbis	0x16, 5	; 22
     cec:	1d c0       	rjmp	.+58     	; 0xd28 <playMusic+0xfe>
	    if(!chatter) {
     cee:	88 23       	and	r24, r24
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <playMusic+0xca>
     cf2:	92 c0       	rjmp	.+292    	; 0xe18 <playMusic+0x1ee>
			sm1Speed++;
     cf4:	80 91 00 01 	lds	r24, 0x0100
     cf8:	90 91 01 01 	lds	r25, 0x0101
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 01 01 	sts	0x0101, r25
     d02:	80 93 00 01 	sts	0x0100, r24
			ds++;
     d06:	20 91 5d 05 	lds	r18, 0x055D
     d0a:	2f 5f       	subi	r18, 0xFF	; 255
     d0c:	20 93 5d 05 	sts	0x055D, r18
	       	if(ds > 5) ds = 5;
     d10:	26 30       	cpi	r18, 0x06	; 6
     d12:	18 f0       	brcs	.+6      	; 0xd1a <playMusic+0xf0>
     d14:	25 e0       	ldi	r18, 0x05	; 5
     d16:	20 93 5d 05 	sts	0x055D, r18
			if(sm1Speed >= 6) sm1Speed = 5;
     d1a:	86 30       	cpi	r24, 0x06	; 6
     d1c:	91 05       	cpc	r25, r1
     d1e:	0c f4       	brge	.+2      	; 0xd22 <playMusic+0xf8>
     d20:	7b c0       	rjmp	.+246    	; 0xe18 <playMusic+0x1ee>
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	1e c0       	rjmp	.+60     	; 0xd64 <playMusic+0x13a>
		}
	}
	else if(PINB & 0x10){
     d28:	b4 9b       	sbis	0x16, 4	; 22
     d2a:	21 c0       	rjmp	.+66     	; 0xd6e <playMusic+0x144>
		if(!chatter) {
     d2c:	88 23       	and	r24, r24
     d2e:	09 f0       	breq	.+2      	; 0xd32 <playMusic+0x108>
     d30:	73 c0       	rjmp	.+230    	; 0xe18 <playMusic+0x1ee>
		    sm1Speed--;
     d32:	80 91 00 01 	lds	r24, 0x0100
     d36:	90 91 01 01 	lds	r25, 0x0101
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	90 93 01 01 	sts	0x0101, r25
     d40:	80 93 00 01 	sts	0x0100, r24
			ds--;
     d44:	20 91 5d 05 	lds	r18, 0x055D
     d48:	21 50       	subi	r18, 0x01	; 1
     d4a:	20 93 5d 05 	sts	0x055D, r18
			if(ds <= 0) ds = 1;
     d4e:	22 23       	and	r18, r18
     d50:	19 f4       	brne	.+6      	; 0xd58 <playMusic+0x12e>
     d52:	21 e0       	ldi	r18, 0x01	; 1
     d54:	20 93 5d 05 	sts	0x055D, r18
			if(sm1Speed <= 0) sm1Speed = 1;
     d58:	18 16       	cp	r1, r24
     d5a:	19 06       	cpc	r1, r25
     d5c:	0c f4       	brge	.+2      	; 0xd60 <playMusic+0x136>
     d5e:	5c c0       	rjmp	.+184    	; 0xe18 <playMusic+0x1ee>
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	90 93 01 01 	sts	0x0101, r25
     d68:	80 93 00 01 	sts	0x0100, r24
     d6c:	55 c0       	rjmp	.+170    	; 0xe18 <playMusic+0x1ee>
		}
	}
	 
	else if(PINB & 0x08&& !chatter) {
     d6e:	b3 9b       	sbis	0x16, 3	; 22
     d70:	0b c0       	rjmp	.+22     	; 0xd88 <playMusic+0x15e>
     d72:	88 23       	and	r24, r24
     d74:	49 f4       	brne	.+18     	; 0xd88 <playMusic+0x15e>
		Speaker = (Speaker + 1) % 2;
     d76:	80 91 60 05 	lds	r24, 0x0560
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	81 70       	andi	r24, 0x01	; 1
     d80:	90 70       	andi	r25, 0x00	; 0
     d82:	80 93 60 05 	sts	0x0560, r24
     d86:	0d c0       	rjmp	.+26     	; 0xda2 <playMusic+0x178>
		music = 1;
	}
	else if(PINB & 0x04 && !chatter) {
     d88:	b2 9b       	sbis	0x16, 2	; 22
     d8a:	0d c0       	rjmp	.+26     	; 0xda6 <playMusic+0x17c>
     d8c:	88 23       	and	r24, r24
     d8e:	59 f4       	brne	.+22     	; 0xda6 <playMusic+0x17c>
	     music = music + 1;
     d90:	80 91 62 05 	lds	r24, 0x0562
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 62 05 	sts	0x0562, r24
		 musicNote = 0;
     d9a:	10 92 7f 05 	sts	0x057F, r1
		 if(music >= 5) music = 1;
     d9e:	85 30       	cpi	r24, 0x05	; 5
     da0:	d8 f1       	brcs	.+118    	; 0xe18 <playMusic+0x1ee>
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	0e c0       	rjmp	.+28     	; 0xdc2 <playMusic+0x198>
		 }
	else if(PINB & 0x02 && !chatter) {
     da6:	b1 9b       	sbis	0x16, 1	; 22
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <playMusic+0x19e>
     daa:	88 23       	and	r24, r24
     dac:	69 f4       	brne	.+26     	; 0xdc8 <playMusic+0x19e>
	     music = music - 1;
     dae:	80 91 62 05 	lds	r24, 0x0562
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	80 93 62 05 	sts	0x0562, r24
		 musicNote = 0;
     db8:	10 92 7f 05 	sts	0x057F, r1
		 if(music <= 0) music = 4;
     dbc:	88 23       	and	r24, r24
     dbe:	61 f5       	brne	.+88     	; 0xe18 <playMusic+0x1ee>
     dc0:	84 e0       	ldi	r24, 0x04	; 4
     dc2:	80 93 62 05 	sts	0x0562, r24
     dc6:	28 c0       	rjmp	.+80     	; 0xe18 <playMusic+0x1ee>
		 }
	else if(PINB & 0x01 && !chatter) { 
     dc8:	b0 9b       	sbis	0x16, 0	; 22
     dca:	26 c0       	rjmp	.+76     	; 0xe18 <playMusic+0x1ee>
     dcc:	88 23       	and	r24, r24
     dce:	21 f5       	brne	.+72     	; 0xe18 <playMusic+0x1ee>
	     printLcd(1, 1, t);
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	42 e0       	ldi	r20, 0x02	; 2
     dda:	51 e0       	ldi	r21, 0x01	; 1
     ddc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
		 printLcd(1, 1, t);
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	42 e0       	ldi	r20, 0x02	; 2
     dea:	51 e0       	ldi	r21, 0x01	; 1
     dec:	0e 94 da 02 	call	0x5b4	; 0x5b4 <printLcd>
		 stop = (stop + 1) % 2;
     df0:	80 91 63 05 	lds	r24, 0x0563
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	81 70       	andi	r24, 0x01	; 1
     dfa:	90 70       	andi	r25, 0x00	; 0
     dfc:	80 93 63 05 	sts	0x0563, r24
		 temm = Speaker;
     e00:	20 91 60 05 	lds	r18, 0x0560
     e04:	20 93 81 05 	sts	0x0581, r18
     e08:	10 92 82 05 	sts	0x0582, r1
		 Speaker = 0;
     e0c:	10 92 60 05 	sts	0x0560, r1
		 if(!stop) Speaker = temm;   
     e10:	00 97       	sbiw	r24, 0x00	; 0
     e12:	11 f4       	brne	.+4      	; 0xe18 <playMusic+0x1ee>
     e14:	20 93 60 05 	sts	0x0560, r18
	     }
    if(!Speaker) musicKey = 100;
     e18:	80 91 60 05 	lds	r24, 0x0560
     e1c:	88 23       	and	r24, r24
     e1e:	21 f4       	brne	.+8      	; 0xe28 <playMusic+0x1fe>
     e20:	84 e6       	ldi	r24, 0x64	; 100
     e22:	80 93 25 01 	sts	0x0125, r24
     e26:	08 95       	ret
	if(Speaker) {switch (music) {
     e28:	80 91 62 05 	lds	r24, 0x0562
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	09 f4       	brne	.+2      	; 0xe32 <playMusic+0x208>
     e30:	49 c0       	rjmp	.+146    	; 0xec4 <playMusic+0x29a>
     e32:	83 30       	cpi	r24, 0x03	; 3
     e34:	30 f4       	brcc	.+12     	; 0xe42 <playMusic+0x218>
     e36:	88 23       	and	r24, r24
     e38:	59 f0       	breq	.+22     	; 0xe50 <playMusic+0x226>
     e3a:	81 30       	cpi	r24, 0x01	; 1
     e3c:	09 f0       	breq	.+2      	; 0xe40 <playMusic+0x216>
     e3e:	e6 c0       	rjmp	.+460    	; 0x100c <playMusic+0x3e2>
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <playMusic+0x22c>
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	09 f4       	brne	.+2      	; 0xe48 <playMusic+0x21e>
     e46:	6a c0       	rjmp	.+212    	; 0xf1c <playMusic+0x2f2>
     e48:	84 30       	cpi	r24, 0x04	; 4
     e4a:	09 f0       	breq	.+2      	; 0xe4e <playMusic+0x224>
     e4c:	df c0       	rjmp	.+446    	; 0x100c <playMusic+0x3e2>
     e4e:	a4 c0       	rjmp	.+328    	; 0xf98 <playMusic+0x36e>
		case 0: musicKey = 100;
     e50:	84 e6       	ldi	r24, 0x64	; 100
     e52:	80 93 25 01 	sts	0x0125, r24
		case 1: {
	 		if(noteLength > 0) noteLength--;
     e56:	80 91 83 05 	lds	r24, 0x0583
     e5a:	90 91 84 05 	lds	r25, 0x0584
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	31 f0       	breq	.+12     	; 0xe6e <playMusic+0x244>
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	90 93 84 05 	sts	0x0584, r25
     e68:	80 93 83 05 	sts	0x0583, r24
     e6c:	25 c0       	rjmp	.+74     	; 0xeb8 <playMusic+0x28e>
			else if(musicNote < 119) {
     e6e:	60 91 7f 05 	lds	r22, 0x057F
     e72:	67 37       	cpi	r22, 0x77	; 119
     e74:	f0 f4       	brcc	.+60     	; 0xeb2 <playMusic+0x288>
				musicKey = soundofmusic[musicNote] >> 4;
     e76:	e6 2f       	mov	r30, r22
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	e1 54       	subi	r30, 0x41	; 65
     e7c:	fe 4f       	sbci	r31, 0xFE	; 254
     e7e:	80 81       	ld	r24, Z
     e80:	98 2f       	mov	r25, r24
     e82:	92 95       	swap	r25
     e84:	9f 70       	andi	r25, 0x0F	; 15
     e86:	90 93 25 01 	sts	0x0125, r25
				noteLength = 100 * (soundofmusic[musicNote] & 0x0f);
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	8f 70       	andi	r24, 0x0F	; 15
     e8e:	90 70       	andi	r25, 0x00	; 0
     e90:	44 e6       	ldi	r20, 0x64	; 100
     e92:	50 e0       	ldi	r21, 0x00	; 0
     e94:	84 9f       	mul	r24, r20
     e96:	90 01       	movw	r18, r0
     e98:	85 9f       	mul	r24, r21
     e9a:	30 0d       	add	r19, r0
     e9c:	94 9f       	mul	r25, r20
     e9e:	30 0d       	add	r19, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	30 93 84 05 	sts	0x0584, r19
     ea6:	20 93 83 05 	sts	0x0583, r18
				musicNote++;
     eaa:	6f 5f       	subi	r22, 0xFF	; 255
     eac:	60 93 7f 05 	sts	0x057F, r22
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <playMusic+0x28e>
			}
			else musicKey = 100;
     eb2:	84 e6       	ldi	r24, 0x64	; 100
     eb4:	80 93 25 01 	sts	0x0125, r24
			if(musicNote == 140) {
     eb8:	80 91 7f 05 	lds	r24, 0x057F
     ebc:	8c 38       	cpi	r24, 0x8C	; 140
     ebe:	09 f0       	breq	.+2      	; 0xec2 <playMusic+0x298>
     ec0:	a5 c0       	rjmp	.+330    	; 0x100c <playMusic+0x3e2>
     ec2:	62 c0       	rjmp	.+196    	; 0xf88 <playMusic+0x35e>
				musicNote = 0;
		    	music = music+1;
				}
		} break;
		case 2: {
	 		if(noteLength > 0) noteLength--;
     ec4:	80 91 83 05 	lds	r24, 0x0583
     ec8:	90 91 84 05 	lds	r25, 0x0584
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	31 f0       	breq	.+12     	; 0xedc <playMusic+0x2b2>
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	90 93 84 05 	sts	0x0584, r25
     ed6:	80 93 83 05 	sts	0x0583, r24
     eda:	08 95       	ret
			else if(musicNote < 257) {
				musicKey = cityofstar[musicNote] >> 4;
     edc:	60 91 7f 05 	lds	r22, 0x057F
     ee0:	e6 2f       	mov	r30, r22
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	ea 5c       	subi	r30, 0xCA	; 202
     ee6:	fd 4f       	sbci	r31, 0xFD	; 253
     ee8:	80 81       	ld	r24, Z
     eea:	98 2f       	mov	r25, r24
     eec:	92 95       	swap	r25
     eee:	9f 70       	andi	r25, 0x0F	; 15
     ef0:	90 93 25 01 	sts	0x0125, r25
				noteLength = 100 * (cityofstar[musicNote] & 0x0f);
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	8f 70       	andi	r24, 0x0F	; 15
     ef8:	90 70       	andi	r25, 0x00	; 0
     efa:	44 e6       	ldi	r20, 0x64	; 100
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	84 9f       	mul	r24, r20
     f00:	90 01       	movw	r18, r0
     f02:	85 9f       	mul	r24, r21
     f04:	30 0d       	add	r19, r0
     f06:	94 9f       	mul	r25, r20
     f08:	30 0d       	add	r19, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	30 93 84 05 	sts	0x0584, r19
     f10:	20 93 83 05 	sts	0x0583, r18
				musicNote++;
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	60 93 7f 05 	sts	0x057F, r22
     f1a:	08 95       	ret
				musicNote = 0;
				music = music + 1;
			}
		} break;
	 	case 3: {
	 		if(noteLength > 0) noteLength--;
     f1c:	80 91 83 05 	lds	r24, 0x0583
     f20:	90 91 84 05 	lds	r25, 0x0584
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	31 f0       	breq	.+12     	; 0xf34 <playMusic+0x30a>
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	90 93 84 05 	sts	0x0584, r25
     f2e:	80 93 83 05 	sts	0x0583, r24
     f32:	25 c0       	rjmp	.+74     	; 0xf7e <playMusic+0x354>
			else if(musicNote < 177) {
     f34:	60 91 7f 05 	lds	r22, 0x057F
     f38:	61 3b       	cpi	r22, 0xB1	; 177
     f3a:	f0 f4       	brcc	.+60     	; 0xf78 <playMusic+0x34e>
				musicKey = powerup[musicNote] >> 4;
     f3c:	e6 2f       	mov	r30, r22
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	e9 5c       	subi	r30, 0xC9	; 201
     f42:	fc 4f       	sbci	r31, 0xFC	; 252
     f44:	80 81       	ld	r24, Z
     f46:	98 2f       	mov	r25, r24
     f48:	92 95       	swap	r25
     f4a:	9f 70       	andi	r25, 0x0F	; 15
     f4c:	90 93 25 01 	sts	0x0125, r25
			  	noteLength = 100 * (powerup[musicNote] & 0x0f);
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	8f 70       	andi	r24, 0x0F	; 15
     f54:	90 70       	andi	r25, 0x00	; 0
     f56:	44 e6       	ldi	r20, 0x64	; 100
     f58:	50 e0       	ldi	r21, 0x00	; 0
     f5a:	84 9f       	mul	r24, r20
     f5c:	90 01       	movw	r18, r0
     f5e:	85 9f       	mul	r24, r21
     f60:	30 0d       	add	r19, r0
     f62:	94 9f       	mul	r25, r20
     f64:	30 0d       	add	r19, r0
     f66:	11 24       	eor	r1, r1
     f68:	30 93 84 05 	sts	0x0584, r19
     f6c:	20 93 83 05 	sts	0x0583, r18
			 	musicNote++;
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	60 93 7f 05 	sts	0x057F, r22
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <playMusic+0x354>
			} else musicKey = 100;
     f78:	84 e6       	ldi	r24, 0x64	; 100
     f7a:	80 93 25 01 	sts	0x0125, r24
			if(musicNote == 176) {
     f7e:	80 91 7f 05 	lds	r24, 0x057F
     f82:	80 3b       	cpi	r24, 0xB0	; 176
     f84:	09 f0       	breq	.+2      	; 0xf88 <playMusic+0x35e>
     f86:	42 c0       	rjmp	.+132    	; 0x100c <playMusic+0x3e2>
				musicNote = 0;
     f88:	10 92 7f 05 	sts	0x057F, r1
			  	music = music + 1;
     f8c:	80 91 62 05 	lds	r24, 0x0562
     f90:	8f 5f       	subi	r24, 0xFF	; 255
     f92:	80 93 62 05 	sts	0x0562, r24
     f96:	08 95       	ret
			}
		} break;
			 case 4: {
	 			if(noteLength > 0) noteLength--;
     f98:	80 91 83 05 	lds	r24, 0x0583
     f9c:	90 91 84 05 	lds	r25, 0x0584
     fa0:	00 97       	sbiw	r24, 0x00	; 0
     fa2:	31 f0       	breq	.+12     	; 0xfb0 <playMusic+0x386>
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	90 93 84 05 	sts	0x0584, r25
     faa:	80 93 83 05 	sts	0x0583, r24
     fae:	25 c0       	rjmp	.+74     	; 0xffa <playMusic+0x3d0>
				else if(musicNote < 77) {
     fb0:	60 91 7f 05 	lds	r22, 0x057F
     fb4:	6d 34       	cpi	r22, 0x4D	; 77
     fb6:	f0 f4       	brcc	.+60     	; 0xff4 <playMusic+0x3ca>
					musicKey = londonsong[musicNote] >> 4;
     fb8:	e6 2f       	mov	r30, r22
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	e8 51       	subi	r30, 0x18	; 24
     fbe:	fc 4f       	sbci	r31, 0xFC	; 252
     fc0:	80 81       	ld	r24, Z
     fc2:	98 2f       	mov	r25, r24
     fc4:	92 95       	swap	r25
     fc6:	9f 70       	andi	r25, 0x0F	; 15
     fc8:	90 93 25 01 	sts	0x0125, r25
					noteLength = 100 * (londonsong[musicNote] & 0x0f);
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	8f 70       	andi	r24, 0x0F	; 15
     fd0:	90 70       	andi	r25, 0x00	; 0
     fd2:	44 e6       	ldi	r20, 0x64	; 100
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	84 9f       	mul	r24, r20
     fd8:	90 01       	movw	r18, r0
     fda:	85 9f       	mul	r24, r21
     fdc:	30 0d       	add	r19, r0
     fde:	94 9f       	mul	r25, r20
     fe0:	30 0d       	add	r19, r0
     fe2:	11 24       	eor	r1, r1
     fe4:	30 93 84 05 	sts	0x0584, r19
     fe8:	20 93 83 05 	sts	0x0583, r18
					musicNote++;
     fec:	6f 5f       	subi	r22, 0xFF	; 255
     fee:	60 93 7f 05 	sts	0x057F, r22
     ff2:	03 c0       	rjmp	.+6      	; 0xffa <playMusic+0x3d0>
			} else musicKey = 100;
     ff4:	84 e6       	ldi	r24, 0x64	; 100
     ff6:	80 93 25 01 	sts	0x0125, r24
			if(musicNote == 76) {
     ffa:	80 91 7f 05 	lds	r24, 0x057F
     ffe:	8c 34       	cpi	r24, 0x4C	; 76
    1000:	29 f4       	brne	.+10     	; 0x100c <playMusic+0x3e2>
				musicNote = 0;
    1002:	10 92 7f 05 	sts	0x057F, r1
				music = 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	80 93 62 05 	sts	0x0562, r24
    100c:	08 95       	ret

0000100e <main>:

#ifdef _MAIN
int main(void)
{
 
   initDevices();
    100e:	0e 94 a3 03 	call	0x746	; 0x746 <initDevices>
   initLcd();
    1012:	0e 94 a1 02 	call	0x542	; 0x542 <initLcd>
   setMotorSpeed(ds); 
    1016:	80 91 5d 05 	lds	r24, 0x055D
    101a:	90 91 5e 05 	lds	r25, 0x055E
    101e:	0e 94 de 03 	call	0x7bc	; 0x7bc <setMotorSpeed>
   
   while(1){
      flushFndDigit();
    1022:	0e 94 4a 04 	call	0x894	; 0x894 <flushFndDigit>
    1026:	fd cf       	rjmp	.-6      	; 0x1022 <main+0x14>

00001028 <editCharLcd>:
char	m[32]="                                ";
int		c;

void
editCharLcd(void)
{
    1028:	cf 92       	push	r12
    102a:	df 92       	push	r13
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
	while(peekChar() > -1) {
		c = getChar();
		if(c != 46) m[i] = c;
		else if(c == 46) {
			printf("\n");
			reci = 1;
    1038:	cc 24       	eor	r12, r12
    103a:	c3 94       	inc	r12
			i = i - 1;
		}
		if(c == 8) {		// BS
			printf("<-delete!");
    103c:	c6 e3       	ldi	r28, 0x36	; 54
    103e:	d4 e0       	ldi	r29, 0x04	; 4
			for(int k = 0; k < 32; k++) m[k] = 32;
    1040:	90 e2       	ldi	r25, 0x20	; 32
    1042:	d9 2e       	mov	r13, r25
		}
		if(!Message) {
			if(c != 8) printf("%d \r",c);
    1044:	00 e4       	ldi	r16, 0x40	; 64
    1046:	14 e0       	ldi	r17, 0x04	; 4
		}
 		i = (i + 1) % 32;
    1048:	80 e2       	ldi	r24, 0x20	; 32
    104a:	e8 2e       	mov	r14, r24
    104c:	f1 2c       	mov	r15, r1
void
editCharLcd(void)
{

   
	while(peekChar() > -1) {
    104e:	67 c0       	rjmp	.+206    	; 0x111e <__stack+0x1f>
		c = getChar();
    1050:	0e 94 70 03 	call	0x6e0	; 0x6e0 <getChar>
    1054:	90 93 9c 06 	sts	0x069C, r25
    1058:	80 93 9b 06 	sts	0x069B, r24
		if(c != 46) m[i] = c;
    105c:	8e 32       	cpi	r24, 0x2E	; 46
    105e:	91 05       	cpc	r25, r1
    1060:	41 f0       	breq	.+16     	; 0x1072 <editCharLcd+0x4a>
    1062:	e0 91 85 05 	lds	r30, 0x0585
    1066:	f0 91 86 05 	lds	r31, 0x0586
    106a:	eb 5b       	subi	r30, 0xBB	; 187
    106c:	fb 4f       	sbci	r31, 0xFB	; 251
    106e:	80 83       	st	Z, r24
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <editCharLcd+0x68>
		else if(c == 46) {
			printf("\n");
    1072:	8a e0       	ldi	r24, 0x0A	; 10
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 98 09 	call	0x1330	; 0x1330 <putchar>
			reci = 1;
    107a:	c0 92 61 05 	sts	0x0561, r12
			i = i - 1;
    107e:	80 91 85 05 	lds	r24, 0x0585
    1082:	90 91 86 05 	lds	r25, 0x0586
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	90 93 86 05 	sts	0x0586, r25
    108c:	80 93 85 05 	sts	0x0585, r24
		}
		if(c == 8) {		// BS
    1090:	80 91 9b 06 	lds	r24, 0x069B
    1094:	90 91 9c 06 	lds	r25, 0x069C
    1098:	88 30       	cpi	r24, 0x08	; 8
    109a:	91 05       	cpc	r25, r1
    109c:	81 f4       	brne	.+32     	; 0x10be <editCharLcd+0x96>
			printf("<-delete!");
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <editCharLcd+0x78>
    10a0:	ed b7       	in	r30, 0x3d	; 61
    10a2:	fe b7       	in	r31, 0x3e	; 62
    10a4:	d2 83       	std	Z+2, r29	; 0x02
    10a6:	c1 83       	std	Z+1, r28	; 0x01
    10a8:	0e 94 86 09 	call	0x130c	; 0x130c <printf>
    10ac:	e5 e4       	ldi	r30, 0x45	; 69
    10ae:	f4 e0       	ldi	r31, 0x04	; 4
int		i = 0;
char	m[32]="                                ";
int		c;

void
editCharLcd(void)
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
			reci = 1;
			i = i - 1;
		}
		if(c == 8) {		// BS
			printf("<-delete!");
			for(int k = 0; k < 32; k++) m[k] = 32;
    10b4:	d1 92       	st	Z+, r13
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	e5 36       	cpi	r30, 0x65	; 101
    10ba:	f8 07       	cpc	r31, r24
    10bc:	d9 f7       	brne	.-10     	; 0x10b4 <editCharLcd+0x8c>
		}
		if(!Message) {
    10be:	80 91 5f 05 	lds	r24, 0x055F
    10c2:	88 23       	and	r24, r24
    10c4:	a9 f4       	brne	.+42     	; 0x10f0 <editCharLcd+0xc8>
			if(c != 8) printf("%d \r",c);
    10c6:	80 91 9b 06 	lds	r24, 0x069B
    10ca:	90 91 9c 06 	lds	r25, 0x069C
    10ce:	88 30       	cpi	r24, 0x08	; 8
    10d0:	91 05       	cpc	r25, r1
    10d2:	71 f0       	breq	.+28     	; 0x10f0 <editCharLcd+0xc8>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <editCharLcd+0xae>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <editCharLcd+0xb0>
    10d8:	ed b7       	in	r30, 0x3d	; 61
    10da:	fe b7       	in	r31, 0x3e	; 62
    10dc:	12 83       	std	Z+2, r17	; 0x02
    10de:	01 83       	std	Z+1, r16	; 0x01
    10e0:	94 83       	std	Z+4, r25	; 0x04
    10e2:	83 83       	std	Z+3, r24	; 0x03
    10e4:	0e 94 86 09 	call	0x130c	; 0x130c <printf>
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
		}
 		i = (i + 1) % 32;
    10f0:	80 91 85 05 	lds	r24, 0x0585
    10f4:	90 91 86 05 	lds	r25, 0x0586
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	b7 01       	movw	r22, r14
    10fc:	0e 94 28 09 	call	0x1250	; 0x1250 <__divmodhi4>
    1100:	90 93 86 05 	sts	0x0586, r25
    1104:	80 93 85 05 	sts	0x0585, r24
		if(c == 8) i = 0;	   
    1108:	80 91 9b 06 	lds	r24, 0x069B
    110c:	90 91 9c 06 	lds	r25, 0x069C
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	91 05       	cpc	r25, r1
    1114:	21 f4       	brne	.+8      	; 0x111e <__stack+0x1f>
    1116:	10 92 86 05 	sts	0x0586, r1
    111a:	10 92 85 05 	sts	0x0585, r1
void
editCharLcd(void)
{

   
	while(peekChar() > -1) {
    111e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <peekChar>
    1122:	97 ff       	sbrs	r25, 7
    1124:	95 cf       	rjmp	.-214    	; 0x1050 <editCharLcd+0x28>
			if(c != 8) printf("%d \r",c);
		}
 		i = (i + 1) % 32;
		if(c == 8) i = 0;	   
	}
}
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	08 95       	ret

00001138 <turnDotMatrixPage>:
}
#endif

void turnDotMatrixPage(void)
{
	if(!on) dotMatrixData = page2;
    1138:	80 91 5c 05 	lds	r24, 0x055C
    113c:	88 23       	and	r24, r24
    113e:	39 f4       	brne	.+14     	; 0x114e <turnDotMatrixPage+0x16>
    1140:	87 e8       	ldi	r24, 0x87	; 135
    1142:	95 e0       	ldi	r25, 0x05	; 5
    1144:	90 93 69 05 	sts	0x0569, r25
    1148:	80 93 68 05 	sts	0x0568, r24
    114c:	56 c0       	rjmp	.+172    	; 0x11fa <turnDotMatrixPage+0xc2>
	if(on && !stop) {
    114e:	80 91 63 05 	lds	r24, 0x0563
    1152:	88 23       	and	r24, r24
    1154:	09 f0       	breq	.+2      	; 0x1158 <turnDotMatrixPage+0x20>
    1156:	51 c0       	rjmp	.+162    	; 0x11fa <turnDotMatrixPage+0xc2>
		switch(ds) {
    1158:	80 91 5d 05 	lds	r24, 0x055D
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	01 f1       	breq	.+64     	; 0x11a0 <turnDotMatrixPage+0x68>
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	30 f4       	brcc	.+12     	; 0x1170 <turnDotMatrixPage+0x38>
    1164:	88 23       	and	r24, r24
    1166:	61 f0       	breq	.+24     	; 0x1180 <turnDotMatrixPage+0x48>
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	09 f0       	breq	.+2      	; 0x116e <turnDotMatrixPage+0x36>
    116c:	50 c0       	rjmp	.+160    	; 0x120e <turnDotMatrixPage+0xd6>
    116e:	0f c0       	rjmp	.+30     	; 0x118e <turnDotMatrixPage+0x56>
    1170:	84 30       	cpi	r24, 0x04	; 4
    1172:	41 f1       	breq	.+80     	; 0x11c4 <turnDotMatrixPage+0x8c>
    1174:	84 30       	cpi	r24, 0x04	; 4
    1176:	e8 f0       	brcs	.+58     	; 0x11b2 <turnDotMatrixPage+0x7a>
    1178:	85 30       	cpi	r24, 0x05	; 5
    117a:	09 f0       	breq	.+2      	; 0x117e <turnDotMatrixPage+0x46>
    117c:	48 c0       	rjmp	.+144    	; 0x120e <turnDotMatrixPage+0xd6>
    117e:	2b c0       	rjmp	.+86     	; 0x11d6 <turnDotMatrixPage+0x9e>
			case 0:
				dotMatrixData = page;
    1180:	85 e6       	ldi	r24, 0x65	; 101
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	90 93 69 05 	sts	0x0569, r25
    1188:	80 93 68 05 	sts	0x0568, r24
				break;
    118c:	08 95       	ret
			case 1:
				dotMatrixData = page11[dotMatrixPage];
    118e:	20 91 a1 04 	lds	r18, 0x04A1
    1192:	84 e1       	ldi	r24, 0x14	; 20
    1194:	28 9f       	mul	r18, r24
    1196:	c0 01       	movw	r24, r0
    1198:	11 24       	eor	r1, r1
    119a:	87 58       	subi	r24, 0x87	; 135
    119c:	9b 4f       	sbci	r25, 0xFB	; 251
    119e:	23 c0       	rjmp	.+70     	; 0x11e6 <turnDotMatrixPage+0xae>
				dotMatrixPage++;
				dotMatrixPage %= 2;
				break;
			case 2:
				dotMatrixData = page22[dotMatrixPage];
    11a0:	20 91 a1 04 	lds	r18, 0x04A1
    11a4:	84 e1       	ldi	r24, 0x14	; 20
    11a6:	28 9f       	mul	r18, r24
    11a8:	c0 01       	movw	r24, r0
    11aa:	11 24       	eor	r1, r1
    11ac:	8e 55       	subi	r24, 0x5E	; 94
    11ae:	9b 4f       	sbci	r25, 0xFB	; 251
    11b0:	1a c0       	rjmp	.+52     	; 0x11e6 <turnDotMatrixPage+0xae>
				dotMatrixPage++;
				dotMatrixPage %= 2;
				break;
			case 3:
				dotMatrixData = page33[dotMatrixPage];
    11b2:	20 91 a1 04 	lds	r18, 0x04A1
    11b6:	84 e1       	ldi	r24, 0x14	; 20
    11b8:	28 9f       	mul	r18, r24
    11ba:	c0 01       	movw	r24, r0
    11bc:	11 24       	eor	r1, r1
    11be:	86 53       	subi	r24, 0x36	; 54
    11c0:	9b 4f       	sbci	r25, 0xFB	; 251
    11c2:	11 c0       	rjmp	.+34     	; 0x11e6 <turnDotMatrixPage+0xae>
				dotMatrixPage++;
				dotMatrixPage %= 2;
				break;
			case 4:
				dotMatrixData = page44[dotMatrixPage];
    11c4:	20 91 a1 04 	lds	r18, 0x04A1
    11c8:	84 e1       	ldi	r24, 0x14	; 20
    11ca:	28 9f       	mul	r18, r24
    11cc:	c0 01       	movw	r24, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	8e 50       	subi	r24, 0x0E	; 14
    11d2:	9b 4f       	sbci	r25, 0xFB	; 251
    11d4:	08 c0       	rjmp	.+16     	; 0x11e6 <turnDotMatrixPage+0xae>
				dotMatrixPage++;
				dotMatrixPage %= 2;
				break;
			case 5:
				dotMatrixData = page55[dotMatrixPage];
    11d6:	20 91 a1 04 	lds	r18, 0x04A1
    11da:	84 e1       	ldi	r24, 0x14	; 20
    11dc:	28 9f       	mul	r18, r24
    11de:	c0 01       	movw	r24, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	86 5e       	subi	r24, 0xE6	; 230
    11e4:	9a 4f       	sbci	r25, 0xFA	; 250
    11e6:	90 93 69 05 	sts	0x0569, r25
    11ea:	80 93 68 05 	sts	0x0568, r24
				dotMatrixPage++;
    11ee:	82 2f       	mov	r24, r18
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
				dotMatrixPage %= 2;
    11f2:	81 70       	andi	r24, 0x01	; 1
    11f4:	80 93 a1 04 	sts	0x04A1, r24
				break;
    11f8:	08 95       	ret

		}
	}
     else if(stop) dotMatrixData = pageP;
    11fa:	80 91 63 05 	lds	r24, 0x0563
    11fe:	88 23       	and	r24, r24
    1200:	31 f0       	breq	.+12     	; 0x120e <turnDotMatrixPage+0xd6>
    1202:	82 e4       	ldi	r24, 0x42	; 66
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	90 93 69 05 	sts	0x0569, r25
    120a:	80 93 68 05 	sts	0x0568, r24
    120e:	08 95       	ret

00001210 <__udivmodqi4>:
    1210:	99 1b       	sub	r25, r25
    1212:	79 e0       	ldi	r23, 0x09	; 9
    1214:	04 c0       	rjmp	.+8      	; 0x121e <__udivmodqi4_ep>

00001216 <__udivmodqi4_loop>:
    1216:	99 1f       	adc	r25, r25
    1218:	96 17       	cp	r25, r22
    121a:	08 f0       	brcs	.+2      	; 0x121e <__udivmodqi4_ep>
    121c:	96 1b       	sub	r25, r22

0000121e <__udivmodqi4_ep>:
    121e:	88 1f       	adc	r24, r24
    1220:	7a 95       	dec	r23
    1222:	c9 f7       	brne	.-14     	; 0x1216 <__udivmodqi4_loop>
    1224:	80 95       	com	r24
    1226:	08 95       	ret

00001228 <__udivmodhi4>:
    1228:	aa 1b       	sub	r26, r26
    122a:	bb 1b       	sub	r27, r27
    122c:	51 e1       	ldi	r21, 0x11	; 17
    122e:	07 c0       	rjmp	.+14     	; 0x123e <__udivmodhi4_ep>

00001230 <__udivmodhi4_loop>:
    1230:	aa 1f       	adc	r26, r26
    1232:	bb 1f       	adc	r27, r27
    1234:	a6 17       	cp	r26, r22
    1236:	b7 07       	cpc	r27, r23
    1238:	10 f0       	brcs	.+4      	; 0x123e <__udivmodhi4_ep>
    123a:	a6 1b       	sub	r26, r22
    123c:	b7 0b       	sbc	r27, r23

0000123e <__udivmodhi4_ep>:
    123e:	88 1f       	adc	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	5a 95       	dec	r21
    1244:	a9 f7       	brne	.-22     	; 0x1230 <__udivmodhi4_loop>
    1246:	80 95       	com	r24
    1248:	90 95       	com	r25
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	08 95       	ret

00001250 <__divmodhi4>:
    1250:	97 fb       	bst	r25, 7
    1252:	09 2e       	mov	r0, r25
    1254:	07 26       	eor	r0, r23
    1256:	0a d0       	rcall	.+20     	; 0x126c <__divmodhi4_neg1>
    1258:	77 fd       	sbrc	r23, 7
    125a:	04 d0       	rcall	.+8      	; 0x1264 <__divmodhi4_neg2>
    125c:	e5 df       	rcall	.-54     	; 0x1228 <__udivmodhi4>
    125e:	06 d0       	rcall	.+12     	; 0x126c <__divmodhi4_neg1>
    1260:	00 20       	and	r0, r0
    1262:	1a f4       	brpl	.+6      	; 0x126a <__divmodhi4_exit>

00001264 <__divmodhi4_neg2>:
    1264:	70 95       	com	r23
    1266:	61 95       	neg	r22
    1268:	7f 4f       	sbci	r23, 0xFF	; 255

0000126a <__divmodhi4_exit>:
    126a:	08 95       	ret

0000126c <__divmodhi4_neg1>:
    126c:	f6 f7       	brtc	.-4      	; 0x126a <__divmodhi4_exit>
    126e:	90 95       	com	r25
    1270:	81 95       	neg	r24
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	08 95       	ret

00001276 <fdevopen>:
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	8c 01       	movw	r16, r24
    1280:	eb 01       	movw	r28, r22
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	11 f4       	brne	.+4      	; 0x128a <fdevopen+0x14>
    1286:	20 97       	sbiw	r28, 0x00	; 0
    1288:	c9 f1       	breq	.+114    	; 0x12fc <fdevopen+0x86>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	6e e0       	ldi	r22, 0x0E	; 14
    1290:	70 e0       	ldi	r23, 0x00	; 0
    1292:	0e 94 af 0b 	call	0x175e	; 0x175e <calloc>
    1296:	fc 01       	movw	r30, r24
    1298:	9c 01       	movw	r18, r24
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	89 f1       	breq	.+98     	; 0x1300 <fdevopen+0x8a>
    129e:	80 e8       	ldi	r24, 0x80	; 128
    12a0:	83 83       	std	Z+3, r24	; 0x03
    12a2:	20 97       	sbiw	r28, 0x00	; 0
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <fdevopen+0x4c>
    12a6:	d3 87       	std	Z+11, r29	; 0x0b
    12a8:	c2 87       	std	Z+10, r28	; 0x0a
    12aa:	81 e8       	ldi	r24, 0x81	; 129
    12ac:	83 83       	std	Z+3, r24	; 0x03
    12ae:	80 91 9d 06 	lds	r24, 0x069D
    12b2:	90 91 9e 06 	lds	r25, 0x069E
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	21 f4       	brne	.+8      	; 0x12c2 <fdevopen+0x4c>
    12ba:	f0 93 9e 06 	sts	0x069E, r31
    12be:	e0 93 9d 06 	sts	0x069D, r30
    12c2:	01 15       	cp	r16, r1
    12c4:	11 05       	cpc	r17, r1
    12c6:	e1 f0       	breq	.+56     	; 0x1300 <fdevopen+0x8a>
    12c8:	11 87       	std	Z+9, r17	; 0x09
    12ca:	00 87       	std	Z+8, r16	; 0x08
    12cc:	83 81       	ldd	r24, Z+3	; 0x03
    12ce:	82 60       	ori	r24, 0x02	; 2
    12d0:	83 83       	std	Z+3, r24	; 0x03
    12d2:	80 91 9f 06 	lds	r24, 0x069F
    12d6:	90 91 a0 06 	lds	r25, 0x06A0
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	89 f4       	brne	.+34     	; 0x1300 <fdevopen+0x8a>
    12de:	f0 93 a0 06 	sts	0x06A0, r31
    12e2:	e0 93 9f 06 	sts	0x069F, r30
    12e6:	80 91 a1 06 	lds	r24, 0x06A1
    12ea:	90 91 a2 06 	lds	r25, 0x06A2
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	39 f4       	brne	.+14     	; 0x1300 <fdevopen+0x8a>
    12f2:	f0 93 a2 06 	sts	0x06A2, r31
    12f6:	e0 93 a1 06 	sts	0x06A1, r30
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <fdevopen+0x8a>
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	c9 01       	movw	r24, r18
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	08 95       	ret

0000130c <printf>:
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	fe 01       	movw	r30, r28
    1316:	35 96       	adiw	r30, 0x05	; 5
    1318:	61 91       	ld	r22, Z+
    131a:	71 91       	ld	r23, Z+
    131c:	80 91 9f 06 	lds	r24, 0x069F
    1320:	90 91 a0 06 	lds	r25, 0x06A0
    1324:	af 01       	movw	r20, r30
    1326:	0e 94 9f 09 	call	0x133e	; 0x133e <vfprintf>
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <putchar>:
    1330:	60 91 9f 06 	lds	r22, 0x069F
    1334:	70 91 a0 06 	lds	r23, 0x06A0
    1338:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    133c:	08 95       	ret

0000133e <vfprintf>:
    133e:	2f 92       	push	r2
    1340:	3f 92       	push	r3
    1342:	4f 92       	push	r4
    1344:	5f 92       	push	r5
    1346:	6f 92       	push	r6
    1348:	7f 92       	push	r7
    134a:	8f 92       	push	r8
    134c:	9f 92       	push	r9
    134e:	af 92       	push	r10
    1350:	bf 92       	push	r11
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	2c 97       	sbiw	r28, 0x0c	; 12
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	f8 94       	cli
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	cd bf       	out	0x3d, r28	; 61
    1372:	6c 01       	movw	r12, r24
    1374:	1b 01       	movw	r2, r22
    1376:	8a 01       	movw	r16, r20
    1378:	fc 01       	movw	r30, r24
    137a:	17 82       	std	Z+7, r1	; 0x07
    137c:	16 82       	std	Z+6, r1	; 0x06
    137e:	83 81       	ldd	r24, Z+3	; 0x03
    1380:	81 ff       	sbrs	r24, 1
    1382:	d1 c1       	rjmp	.+930    	; 0x1726 <vfprintf+0x3e8>
    1384:	2e 01       	movw	r4, r28
    1386:	08 94       	sec
    1388:	41 1c       	adc	r4, r1
    138a:	51 1c       	adc	r5, r1
    138c:	f6 01       	movw	r30, r12
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	f1 01       	movw	r30, r2
    1392:	93 fd       	sbrc	r25, 3
    1394:	85 91       	lpm	r24, Z+
    1396:	93 ff       	sbrs	r25, 3
    1398:	81 91       	ld	r24, Z+
    139a:	1f 01       	movw	r2, r30
    139c:	88 23       	and	r24, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <vfprintf+0x64>
    13a0:	be c1       	rjmp	.+892    	; 0x171e <vfprintf+0x3e0>
    13a2:	85 32       	cpi	r24, 0x25	; 37
    13a4:	39 f4       	brne	.+14     	; 0x13b4 <vfprintf+0x76>
    13a6:	93 fd       	sbrc	r25, 3
    13a8:	85 91       	lpm	r24, Z+
    13aa:	93 ff       	sbrs	r25, 3
    13ac:	81 91       	ld	r24, Z+
    13ae:	1f 01       	movw	r2, r30
    13b0:	85 32       	cpi	r24, 0x25	; 37
    13b2:	29 f4       	brne	.+10     	; 0x13be <vfprintf+0x80>
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	b6 01       	movw	r22, r12
    13b8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    13bc:	e7 cf       	rjmp	.-50     	; 0x138c <vfprintf+0x4e>
    13be:	ee 24       	eor	r14, r14
    13c0:	ff 24       	eor	r15, r15
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	20 32       	cpi	r18, 0x20	; 32
    13c6:	b0 f4       	brcc	.+44     	; 0x13f4 <vfprintf+0xb6>
    13c8:	8b 32       	cpi	r24, 0x2B	; 43
    13ca:	69 f0       	breq	.+26     	; 0x13e6 <vfprintf+0xa8>
    13cc:	8c 32       	cpi	r24, 0x2C	; 44
    13ce:	28 f4       	brcc	.+10     	; 0x13da <vfprintf+0x9c>
    13d0:	80 32       	cpi	r24, 0x20	; 32
    13d2:	51 f0       	breq	.+20     	; 0x13e8 <vfprintf+0xaa>
    13d4:	83 32       	cpi	r24, 0x23	; 35
    13d6:	71 f4       	brne	.+28     	; 0x13f4 <vfprintf+0xb6>
    13d8:	0b c0       	rjmp	.+22     	; 0x13f0 <vfprintf+0xb2>
    13da:	8d 32       	cpi	r24, 0x2D	; 45
    13dc:	39 f0       	breq	.+14     	; 0x13ec <vfprintf+0xae>
    13de:	80 33       	cpi	r24, 0x30	; 48
    13e0:	49 f4       	brne	.+18     	; 0x13f4 <vfprintf+0xb6>
    13e2:	21 60       	ori	r18, 0x01	; 1
    13e4:	2c c0       	rjmp	.+88     	; 0x143e <vfprintf+0x100>
    13e6:	22 60       	ori	r18, 0x02	; 2
    13e8:	24 60       	ori	r18, 0x04	; 4
    13ea:	29 c0       	rjmp	.+82     	; 0x143e <vfprintf+0x100>
    13ec:	28 60       	ori	r18, 0x08	; 8
    13ee:	27 c0       	rjmp	.+78     	; 0x143e <vfprintf+0x100>
    13f0:	20 61       	ori	r18, 0x10	; 16
    13f2:	25 c0       	rjmp	.+74     	; 0x143e <vfprintf+0x100>
    13f4:	27 fd       	sbrc	r18, 7
    13f6:	2c c0       	rjmp	.+88     	; 0x1450 <vfprintf+0x112>
    13f8:	38 2f       	mov	r19, r24
    13fa:	30 53       	subi	r19, 0x30	; 48
    13fc:	3a 30       	cpi	r19, 0x0A	; 10
    13fe:	98 f4       	brcc	.+38     	; 0x1426 <vfprintf+0xe8>
    1400:	26 ff       	sbrs	r18, 6
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <vfprintf+0xd6>
    1404:	8e 2d       	mov	r24, r14
    1406:	88 0f       	add	r24, r24
    1408:	e8 2e       	mov	r14, r24
    140a:	ee 0c       	add	r14, r14
    140c:	ee 0c       	add	r14, r14
    140e:	e8 0e       	add	r14, r24
    1410:	e3 0e       	add	r14, r19
    1412:	15 c0       	rjmp	.+42     	; 0x143e <vfprintf+0x100>
    1414:	8f 2d       	mov	r24, r15
    1416:	88 0f       	add	r24, r24
    1418:	f8 2e       	mov	r15, r24
    141a:	ff 0c       	add	r15, r15
    141c:	ff 0c       	add	r15, r15
    141e:	f8 0e       	add	r15, r24
    1420:	f3 0e       	add	r15, r19
    1422:	20 62       	ori	r18, 0x20	; 32
    1424:	0c c0       	rjmp	.+24     	; 0x143e <vfprintf+0x100>
    1426:	8e 32       	cpi	r24, 0x2E	; 46
    1428:	21 f4       	brne	.+8      	; 0x1432 <vfprintf+0xf4>
    142a:	26 fd       	sbrc	r18, 6
    142c:	78 c1       	rjmp	.+752    	; 0x171e <vfprintf+0x3e0>
    142e:	20 64       	ori	r18, 0x40	; 64
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0x100>
    1432:	8c 36       	cpi	r24, 0x6C	; 108
    1434:	11 f4       	brne	.+4      	; 0x143a <vfprintf+0xfc>
    1436:	20 68       	ori	r18, 0x80	; 128
    1438:	02 c0       	rjmp	.+4      	; 0x143e <vfprintf+0x100>
    143a:	88 36       	cpi	r24, 0x68	; 104
    143c:	49 f4       	brne	.+18     	; 0x1450 <vfprintf+0x112>
    143e:	f1 01       	movw	r30, r2
    1440:	93 fd       	sbrc	r25, 3
    1442:	85 91       	lpm	r24, Z+
    1444:	93 ff       	sbrs	r25, 3
    1446:	81 91       	ld	r24, Z+
    1448:	1f 01       	movw	r2, r30
    144a:	88 23       	and	r24, r24
    144c:	09 f0       	breq	.+2      	; 0x1450 <vfprintf+0x112>
    144e:	ba cf       	rjmp	.-140    	; 0x13c4 <vfprintf+0x86>
    1450:	98 2f       	mov	r25, r24
    1452:	95 54       	subi	r25, 0x45	; 69
    1454:	93 30       	cpi	r25, 0x03	; 3
    1456:	18 f0       	brcs	.+6      	; 0x145e <vfprintf+0x120>
    1458:	90 52       	subi	r25, 0x20	; 32
    145a:	93 30       	cpi	r25, 0x03	; 3
    145c:	28 f4       	brcc	.+10     	; 0x1468 <vfprintf+0x12a>
    145e:	0c 5f       	subi	r16, 0xFC	; 252
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	ff e3       	ldi	r31, 0x3F	; 63
    1464:	f9 83       	std	Y+1, r31	; 0x01
    1466:	0d c0       	rjmp	.+26     	; 0x1482 <vfprintf+0x144>
    1468:	83 36       	cpi	r24, 0x63	; 99
    146a:	31 f0       	breq	.+12     	; 0x1478 <vfprintf+0x13a>
    146c:	83 37       	cpi	r24, 0x73	; 115
    146e:	71 f0       	breq	.+28     	; 0x148c <vfprintf+0x14e>
    1470:	83 35       	cpi	r24, 0x53	; 83
    1472:	09 f0       	breq	.+2      	; 0x1476 <vfprintf+0x138>
    1474:	60 c0       	rjmp	.+192    	; 0x1536 <vfprintf+0x1f8>
    1476:	22 c0       	rjmp	.+68     	; 0x14bc <vfprintf+0x17e>
    1478:	f8 01       	movw	r30, r16
    147a:	80 81       	ld	r24, Z
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	0e 5f       	subi	r16, 0xFE	; 254
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	42 01       	movw	r8, r4
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	a7 2e       	mov	r10, r23
    1488:	b1 2c       	mov	r11, r1
    148a:	16 c0       	rjmp	.+44     	; 0x14b8 <vfprintf+0x17a>
    148c:	62 e0       	ldi	r22, 0x02	; 2
    148e:	66 2e       	mov	r6, r22
    1490:	71 2c       	mov	r7, r1
    1492:	60 0e       	add	r6, r16
    1494:	71 1e       	adc	r7, r17
    1496:	f8 01       	movw	r30, r16
    1498:	80 80       	ld	r8, Z
    149a:	91 80       	ldd	r9, Z+1	; 0x01
    149c:	26 ff       	sbrs	r18, 6
    149e:	03 c0       	rjmp	.+6      	; 0x14a6 <vfprintf+0x168>
    14a0:	6e 2d       	mov	r22, r14
    14a2:	70 e0       	ldi	r23, 0x00	; 0
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <vfprintf+0x16c>
    14a6:	6f ef       	ldi	r22, 0xFF	; 255
    14a8:	7f ef       	ldi	r23, 0xFF	; 255
    14aa:	c4 01       	movw	r24, r8
    14ac:	2c 87       	std	Y+12, r18	; 0x0c
    14ae:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <strnlen>
    14b2:	5c 01       	movw	r10, r24
    14b4:	83 01       	movw	r16, r6
    14b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    14b8:	2f 77       	andi	r18, 0x7F	; 127
    14ba:	17 c0       	rjmp	.+46     	; 0x14ea <vfprintf+0x1ac>
    14bc:	52 e0       	ldi	r21, 0x02	; 2
    14be:	65 2e       	mov	r6, r21
    14c0:	71 2c       	mov	r7, r1
    14c2:	60 0e       	add	r6, r16
    14c4:	71 1e       	adc	r7, r17
    14c6:	f8 01       	movw	r30, r16
    14c8:	80 80       	ld	r8, Z
    14ca:	91 80       	ldd	r9, Z+1	; 0x01
    14cc:	26 ff       	sbrs	r18, 6
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <vfprintf+0x198>
    14d0:	6e 2d       	mov	r22, r14
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <vfprintf+0x19c>
    14d6:	6f ef       	ldi	r22, 0xFF	; 255
    14d8:	7f ef       	ldi	r23, 0xFF	; 255
    14da:	c4 01       	movw	r24, r8
    14dc:	2c 87       	std	Y+12, r18	; 0x0c
    14de:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <strnlen_P>
    14e2:	5c 01       	movw	r10, r24
    14e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e6:	20 68       	ori	r18, 0x80	; 128
    14e8:	83 01       	movw	r16, r6
    14ea:	23 fd       	sbrc	r18, 3
    14ec:	20 c0       	rjmp	.+64     	; 0x152e <vfprintf+0x1f0>
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <vfprintf+0x1c2>
    14f0:	80 e2       	ldi	r24, 0x20	; 32
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b6 01       	movw	r22, r12
    14f6:	2c 87       	std	Y+12, r18	; 0x0c
    14f8:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    14fc:	fa 94       	dec	r15
    14fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1500:	8f 2d       	mov	r24, r15
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a8 16       	cp	r10, r24
    1506:	b9 06       	cpc	r11, r25
    1508:	98 f3       	brcs	.-26     	; 0x14f0 <vfprintf+0x1b2>
    150a:	11 c0       	rjmp	.+34     	; 0x152e <vfprintf+0x1f0>
    150c:	f4 01       	movw	r30, r8
    150e:	27 fd       	sbrc	r18, 7
    1510:	85 91       	lpm	r24, Z+
    1512:	27 ff       	sbrs	r18, 7
    1514:	81 91       	ld	r24, Z+
    1516:	4f 01       	movw	r8, r30
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	b6 01       	movw	r22, r12
    151c:	2c 87       	std	Y+12, r18	; 0x0c
    151e:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    1522:	2c 85       	ldd	r18, Y+12	; 0x0c
    1524:	f1 10       	cpse	r15, r1
    1526:	fa 94       	dec	r15
    1528:	08 94       	sec
    152a:	a1 08       	sbc	r10, r1
    152c:	b1 08       	sbc	r11, r1
    152e:	a1 14       	cp	r10, r1
    1530:	b1 04       	cpc	r11, r1
    1532:	61 f7       	brne	.-40     	; 0x150c <vfprintf+0x1ce>
    1534:	f1 c0       	rjmp	.+482    	; 0x1718 <vfprintf+0x3da>
    1536:	84 36       	cpi	r24, 0x64	; 100
    1538:	11 f0       	breq	.+4      	; 0x153e <vfprintf+0x200>
    153a:	89 36       	cpi	r24, 0x69	; 105
    153c:	49 f5       	brne	.+82     	; 0x1590 <vfprintf+0x252>
    153e:	27 ff       	sbrs	r18, 7
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <vfprintf+0x214>
    1542:	f8 01       	movw	r30, r16
    1544:	60 81       	ld	r22, Z
    1546:	71 81       	ldd	r23, Z+1	; 0x01
    1548:	82 81       	ldd	r24, Z+2	; 0x02
    154a:	93 81       	ldd	r25, Z+3	; 0x03
    154c:	0c 5f       	subi	r16, 0xFC	; 252
    154e:	1f 4f       	sbci	r17, 0xFF	; 255
    1550:	09 c0       	rjmp	.+18     	; 0x1564 <vfprintf+0x226>
    1552:	f8 01       	movw	r30, r16
    1554:	60 81       	ld	r22, Z
    1556:	71 81       	ldd	r23, Z+1	; 0x01
    1558:	88 27       	eor	r24, r24
    155a:	77 fd       	sbrc	r23, 7
    155c:	80 95       	com	r24
    155e:	98 2f       	mov	r25, r24
    1560:	0e 5f       	subi	r16, 0xFE	; 254
    1562:	1f 4f       	sbci	r17, 0xFF	; 255
    1564:	4f e6       	ldi	r20, 0x6F	; 111
    1566:	b4 2e       	mov	r11, r20
    1568:	b2 22       	and	r11, r18
    156a:	97 ff       	sbrs	r25, 7
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <vfprintf+0x242>
    156e:	90 95       	com	r25
    1570:	80 95       	com	r24
    1572:	70 95       	com	r23
    1574:	61 95       	neg	r22
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8f 4f       	sbci	r24, 0xFF	; 255
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	f0 e8       	ldi	r31, 0x80	; 128
    157e:	bf 2a       	or	r11, r31
    1580:	a2 01       	movw	r20, r4
    1582:	2a e0       	ldi	r18, 0x0A	; 10
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__ultoa_invert>
    158a:	78 2e       	mov	r7, r24
    158c:	74 18       	sub	r7, r4
    158e:	45 c0       	rjmp	.+138    	; 0x161a <vfprintf+0x2dc>
    1590:	85 37       	cpi	r24, 0x75	; 117
    1592:	31 f4       	brne	.+12     	; 0x15a0 <vfprintf+0x262>
    1594:	3f ee       	ldi	r19, 0xEF	; 239
    1596:	b3 2e       	mov	r11, r19
    1598:	b2 22       	and	r11, r18
    159a:	2a e0       	ldi	r18, 0x0A	; 10
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	25 c0       	rjmp	.+74     	; 0x15ea <vfprintf+0x2ac>
    15a0:	99 ef       	ldi	r25, 0xF9	; 249
    15a2:	b9 2e       	mov	r11, r25
    15a4:	b2 22       	and	r11, r18
    15a6:	8f 36       	cpi	r24, 0x6F	; 111
    15a8:	c1 f0       	breq	.+48     	; 0x15da <vfprintf+0x29c>
    15aa:	80 37       	cpi	r24, 0x70	; 112
    15ac:	20 f4       	brcc	.+8      	; 0x15b6 <vfprintf+0x278>
    15ae:	88 35       	cpi	r24, 0x58	; 88
    15b0:	09 f0       	breq	.+2      	; 0x15b4 <vfprintf+0x276>
    15b2:	b5 c0       	rjmp	.+362    	; 0x171e <vfprintf+0x3e0>
    15b4:	0d c0       	rjmp	.+26     	; 0x15d0 <vfprintf+0x292>
    15b6:	80 37       	cpi	r24, 0x70	; 112
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <vfprintf+0x284>
    15ba:	88 37       	cpi	r24, 0x78	; 120
    15bc:	09 f0       	breq	.+2      	; 0x15c0 <vfprintf+0x282>
    15be:	af c0       	rjmp	.+350    	; 0x171e <vfprintf+0x3e0>
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <vfprintf+0x288>
    15c2:	20 e1       	ldi	r18, 0x10	; 16
    15c4:	b2 2a       	or	r11, r18
    15c6:	b4 fe       	sbrs	r11, 4
    15c8:	0b c0       	rjmp	.+22     	; 0x15e0 <vfprintf+0x2a2>
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	b8 2a       	or	r11, r24
    15ce:	08 c0       	rjmp	.+16     	; 0x15e0 <vfprintf+0x2a2>
    15d0:	b4 fe       	sbrs	r11, 4
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <vfprintf+0x2a8>
    15d4:	e6 e0       	ldi	r30, 0x06	; 6
    15d6:	be 2a       	or	r11, r30
    15d8:	06 c0       	rjmp	.+12     	; 0x15e6 <vfprintf+0x2a8>
    15da:	28 e0       	ldi	r18, 0x08	; 8
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <vfprintf+0x2ac>
    15e0:	20 e1       	ldi	r18, 0x10	; 16
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <vfprintf+0x2ac>
    15e6:	20 e1       	ldi	r18, 0x10	; 16
    15e8:	32 e0       	ldi	r19, 0x02	; 2
    15ea:	b7 fe       	sbrs	r11, 7
    15ec:	08 c0       	rjmp	.+16     	; 0x15fe <vfprintf+0x2c0>
    15ee:	f8 01       	movw	r30, r16
    15f0:	60 81       	ld	r22, Z
    15f2:	71 81       	ldd	r23, Z+1	; 0x01
    15f4:	82 81       	ldd	r24, Z+2	; 0x02
    15f6:	93 81       	ldd	r25, Z+3	; 0x03
    15f8:	0c 5f       	subi	r16, 0xFC	; 252
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <vfprintf+0x2ce>
    15fe:	f8 01       	movw	r30, r16
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 5f       	subi	r16, 0xFE	; 254
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	a2 01       	movw	r20, r4
    160e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__ultoa_invert>
    1612:	78 2e       	mov	r7, r24
    1614:	74 18       	sub	r7, r4
    1616:	ff e7       	ldi	r31, 0x7F	; 127
    1618:	bf 22       	and	r11, r31
    161a:	b6 fe       	sbrs	r11, 6
    161c:	0b c0       	rjmp	.+22     	; 0x1634 <vfprintf+0x2f6>
    161e:	2e ef       	ldi	r18, 0xFE	; 254
    1620:	b2 22       	and	r11, r18
    1622:	7e 14       	cp	r7, r14
    1624:	38 f4       	brcc	.+14     	; 0x1634 <vfprintf+0x2f6>
    1626:	b4 fe       	sbrs	r11, 4
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <vfprintf+0x2fa>
    162a:	b2 fc       	sbrc	r11, 2
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <vfprintf+0x2fa>
    162e:	8f ee       	ldi	r24, 0xEF	; 239
    1630:	b8 22       	and	r11, r24
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <vfprintf+0x2fa>
    1634:	a7 2c       	mov	r10, r7
    1636:	01 c0       	rjmp	.+2      	; 0x163a <vfprintf+0x2fc>
    1638:	ae 2c       	mov	r10, r14
    163a:	8b 2d       	mov	r24, r11
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b4 fe       	sbrs	r11, 4
    1640:	0d c0       	rjmp	.+26     	; 0x165c <vfprintf+0x31e>
    1642:	fe 01       	movw	r30, r28
    1644:	e7 0d       	add	r30, r7
    1646:	f1 1d       	adc	r31, r1
    1648:	20 81       	ld	r18, Z
    164a:	20 33       	cpi	r18, 0x30	; 48
    164c:	19 f4       	brne	.+6      	; 0x1654 <vfprintf+0x316>
    164e:	e9 ee       	ldi	r30, 0xE9	; 233
    1650:	be 22       	and	r11, r30
    1652:	09 c0       	rjmp	.+18     	; 0x1666 <vfprintf+0x328>
    1654:	a3 94       	inc	r10
    1656:	b2 fe       	sbrs	r11, 2
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <vfprintf+0x328>
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <vfprintf+0x326>
    165c:	86 78       	andi	r24, 0x86	; 134
    165e:	90 70       	andi	r25, 0x00	; 0
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	09 f0       	breq	.+2      	; 0x1666 <vfprintf+0x328>
    1664:	a3 94       	inc	r10
    1666:	8b 2c       	mov	r8, r11
    1668:	99 24       	eor	r9, r9
    166a:	b3 fc       	sbrc	r11, 3
    166c:	14 c0       	rjmp	.+40     	; 0x1696 <vfprintf+0x358>
    166e:	b0 fe       	sbrs	r11, 0
    1670:	0f c0       	rjmp	.+30     	; 0x1690 <vfprintf+0x352>
    1672:	af 14       	cp	r10, r15
    1674:	28 f4       	brcc	.+10     	; 0x1680 <vfprintf+0x342>
    1676:	e7 2c       	mov	r14, r7
    1678:	ef 0c       	add	r14, r15
    167a:	ea 18       	sub	r14, r10
    167c:	af 2c       	mov	r10, r15
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <vfprintf+0x352>
    1680:	e7 2c       	mov	r14, r7
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0x352>
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	b6 01       	movw	r22, r12
    168a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    168e:	a3 94       	inc	r10
    1690:	af 14       	cp	r10, r15
    1692:	c0 f3       	brcs	.-16     	; 0x1684 <vfprintf+0x346>
    1694:	04 c0       	rjmp	.+8      	; 0x169e <vfprintf+0x360>
    1696:	af 14       	cp	r10, r15
    1698:	10 f4       	brcc	.+4      	; 0x169e <vfprintf+0x360>
    169a:	fa 18       	sub	r15, r10
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <vfprintf+0x362>
    169e:	ff 24       	eor	r15, r15
    16a0:	84 fe       	sbrs	r8, 4
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <vfprintf+0x384>
    16a4:	80 e3       	ldi	r24, 0x30	; 48
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b6 01       	movw	r22, r12
    16aa:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    16ae:	82 fe       	sbrs	r8, 2
    16b0:	1f c0       	rjmp	.+62     	; 0x16f0 <vfprintf+0x3b2>
    16b2:	81 fe       	sbrs	r8, 1
    16b4:	03 c0       	rjmp	.+6      	; 0x16bc <vfprintf+0x37e>
    16b6:	88 e5       	ldi	r24, 0x58	; 88
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <vfprintf+0x39e>
    16bc:	88 e7       	ldi	r24, 0x78	; 120
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0d c0       	rjmp	.+26     	; 0x16dc <vfprintf+0x39e>
    16c2:	c4 01       	movw	r24, r8
    16c4:	86 78       	andi	r24, 0x86	; 134
    16c6:	90 70       	andi	r25, 0x00	; 0
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	91 f0       	breq	.+36     	; 0x16f0 <vfprintf+0x3b2>
    16cc:	81 fc       	sbrc	r8, 1
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <vfprintf+0x396>
    16d0:	80 e2       	ldi	r24, 0x20	; 32
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <vfprintf+0x398>
    16d4:	8b e2       	ldi	r24, 0x2B	; 43
    16d6:	b7 fc       	sbrc	r11, 7
    16d8:	8d e2       	ldi	r24, 0x2D	; 45
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	b6 01       	movw	r22, r12
    16de:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <vfprintf+0x3b2>
    16e4:	80 e3       	ldi	r24, 0x30	; 48
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	b6 01       	movw	r22, r12
    16ea:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    16ee:	ea 94       	dec	r14
    16f0:	7e 14       	cp	r7, r14
    16f2:	c0 f3       	brcs	.-16     	; 0x16e4 <vfprintf+0x3a6>
    16f4:	7a 94       	dec	r7
    16f6:	f2 01       	movw	r30, r4
    16f8:	e7 0d       	add	r30, r7
    16fa:	f1 1d       	adc	r31, r1
    16fc:	80 81       	ld	r24, Z
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	b6 01       	movw	r22, r12
    1702:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    1706:	77 20       	and	r7, r7
    1708:	a9 f7       	brne	.-22     	; 0x16f4 <vfprintf+0x3b6>
    170a:	06 c0       	rjmp	.+12     	; 0x1718 <vfprintf+0x3da>
    170c:	80 e2       	ldi	r24, 0x20	; 32
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	b6 01       	movw	r22, r12
    1712:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <fputc>
    1716:	fa 94       	dec	r15
    1718:	ff 20       	and	r15, r15
    171a:	c1 f7       	brne	.-16     	; 0x170c <vfprintf+0x3ce>
    171c:	37 ce       	rjmp	.-914    	; 0x138c <vfprintf+0x4e>
    171e:	f6 01       	movw	r30, r12
    1720:	26 81       	ldd	r18, Z+6	; 0x06
    1722:	37 81       	ldd	r19, Z+7	; 0x07
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x3ec>
    1726:	2f ef       	ldi	r18, 0xFF	; 255
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	c9 01       	movw	r24, r18
    172c:	2c 96       	adiw	r28, 0x0c	; 12
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	de bf       	out	0x3e, r29	; 62
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	cd bf       	out	0x3d, r28	; 61
    1738:	cf 91       	pop	r28
    173a:	df 91       	pop	r29
    173c:	1f 91       	pop	r17
    173e:	0f 91       	pop	r16
    1740:	ff 90       	pop	r15
    1742:	ef 90       	pop	r14
    1744:	df 90       	pop	r13
    1746:	cf 90       	pop	r12
    1748:	bf 90       	pop	r11
    174a:	af 90       	pop	r10
    174c:	9f 90       	pop	r9
    174e:	8f 90       	pop	r8
    1750:	7f 90       	pop	r7
    1752:	6f 90       	pop	r6
    1754:	5f 90       	pop	r5
    1756:	4f 90       	pop	r4
    1758:	3f 90       	pop	r3
    175a:	2f 90       	pop	r2
    175c:	08 95       	ret

0000175e <calloc>:
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	1f 93       	push	r17
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	68 9f       	mul	r22, r24
    176c:	80 01       	movw	r16, r0
    176e:	69 9f       	mul	r22, r25
    1770:	10 0d       	add	r17, r0
    1772:	78 9f       	mul	r23, r24
    1774:	10 0d       	add	r17, r0
    1776:	11 24       	eor	r1, r1
    1778:	c8 01       	movw	r24, r16
    177a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <malloc>
    177e:	e8 2e       	mov	r14, r24
    1780:	e7 01       	movw	r28, r14
    1782:	7e 01       	movw	r14, r28
    1784:	f9 2e       	mov	r15, r25
    1786:	e7 01       	movw	r28, r14
    1788:	20 97       	sbiw	r28, 0x00	; 0
    178a:	31 f0       	breq	.+12     	; 0x1798 <calloc+0x3a>
    178c:	8e 2d       	mov	r24, r14
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	a8 01       	movw	r20, r16
    1794:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <memset>
    1798:	ce 01       	movw	r24, r28
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	ff 90       	pop	r15
    17a4:	ef 90       	pop	r14
    17a6:	08 95       	ret

000017a8 <malloc>:
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	91 05       	cpc	r25, r1
    17b0:	10 f4       	brcc	.+4      	; 0x17b6 <malloc+0xe>
    17b2:	82 e0       	ldi	r24, 0x02	; 2
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	e0 91 a5 06 	lds	r30, 0x06A5
    17ba:	f0 91 a6 06 	lds	r31, 0x06A6
    17be:	40 e0       	ldi	r20, 0x00	; 0
    17c0:	50 e0       	ldi	r21, 0x00	; 0
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	26 c0       	rjmp	.+76     	; 0x1814 <malloc+0x6c>
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	68 17       	cp	r22, r24
    17ce:	79 07       	cpc	r23, r25
    17d0:	e0 f0       	brcs	.+56     	; 0x180a <malloc+0x62>
    17d2:	68 17       	cp	r22, r24
    17d4:	79 07       	cpc	r23, r25
    17d6:	81 f4       	brne	.+32     	; 0x17f8 <malloc+0x50>
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	21 15       	cp	r18, r1
    17de:	31 05       	cpc	r19, r1
    17e0:	31 f0       	breq	.+12     	; 0x17ee <malloc+0x46>
    17e2:	d9 01       	movw	r26, r18
    17e4:	13 96       	adiw	r26, 0x03	; 3
    17e6:	9c 93       	st	X, r25
    17e8:	8e 93       	st	-X, r24
    17ea:	12 97       	sbiw	r26, 0x02	; 2
    17ec:	2b c0       	rjmp	.+86     	; 0x1844 <malloc+0x9c>
    17ee:	90 93 a6 06 	sts	0x06A6, r25
    17f2:	80 93 a5 06 	sts	0x06A5, r24
    17f6:	26 c0       	rjmp	.+76     	; 0x1844 <malloc+0x9c>
    17f8:	41 15       	cp	r20, r1
    17fa:	51 05       	cpc	r21, r1
    17fc:	19 f0       	breq	.+6      	; 0x1804 <malloc+0x5c>
    17fe:	64 17       	cp	r22, r20
    1800:	75 07       	cpc	r23, r21
    1802:	18 f4       	brcc	.+6      	; 0x180a <malloc+0x62>
    1804:	ab 01       	movw	r20, r22
    1806:	e9 01       	movw	r28, r18
    1808:	df 01       	movw	r26, r30
    180a:	9f 01       	movw	r18, r30
    180c:	72 81       	ldd	r23, Z+2	; 0x02
    180e:	63 81       	ldd	r22, Z+3	; 0x03
    1810:	e7 2f       	mov	r30, r23
    1812:	f6 2f       	mov	r31, r22
    1814:	30 97       	sbiw	r30, 0x00	; 0
    1816:	c1 f6       	brne	.-80     	; 0x17c8 <malloc+0x20>
    1818:	41 15       	cp	r20, r1
    181a:	51 05       	cpc	r21, r1
    181c:	01 f1       	breq	.+64     	; 0x185e <malloc+0xb6>
    181e:	48 1b       	sub	r20, r24
    1820:	59 0b       	sbc	r21, r25
    1822:	44 30       	cpi	r20, 0x04	; 4
    1824:	51 05       	cpc	r21, r1
    1826:	80 f4       	brcc	.+32     	; 0x1848 <malloc+0xa0>
    1828:	12 96       	adiw	r26, 0x02	; 2
    182a:	8d 91       	ld	r24, X+
    182c:	9c 91       	ld	r25, X
    182e:	13 97       	sbiw	r26, 0x03	; 3
    1830:	20 97       	sbiw	r28, 0x00	; 0
    1832:	19 f0       	breq	.+6      	; 0x183a <malloc+0x92>
    1834:	9b 83       	std	Y+3, r25	; 0x03
    1836:	8a 83       	std	Y+2, r24	; 0x02
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <malloc+0x9a>
    183a:	90 93 a6 06 	sts	0x06A6, r25
    183e:	80 93 a5 06 	sts	0x06A5, r24
    1842:	fd 01       	movw	r30, r26
    1844:	32 96       	adiw	r30, 0x02	; 2
    1846:	46 c0       	rjmp	.+140    	; 0x18d4 <malloc+0x12c>
    1848:	fd 01       	movw	r30, r26
    184a:	e4 0f       	add	r30, r20
    184c:	f5 1f       	adc	r31, r21
    184e:	81 93       	st	Z+, r24
    1850:	91 93       	st	Z+, r25
    1852:	42 50       	subi	r20, 0x02	; 2
    1854:	50 40       	sbci	r21, 0x00	; 0
    1856:	11 96       	adiw	r26, 0x01	; 1
    1858:	5c 93       	st	X, r21
    185a:	4e 93       	st	-X, r20
    185c:	3b c0       	rjmp	.+118    	; 0x18d4 <malloc+0x12c>
    185e:	20 91 a3 06 	lds	r18, 0x06A3
    1862:	30 91 a4 06 	lds	r19, 0x06A4
    1866:	21 15       	cp	r18, r1
    1868:	31 05       	cpc	r19, r1
    186a:	41 f4       	brne	.+16     	; 0x187c <malloc+0xd4>
    186c:	20 91 58 05 	lds	r18, 0x0558
    1870:	30 91 59 05 	lds	r19, 0x0559
    1874:	30 93 a4 06 	sts	0x06A4, r19
    1878:	20 93 a3 06 	sts	0x06A3, r18
    187c:	20 91 5a 05 	lds	r18, 0x055A
    1880:	30 91 5b 05 	lds	r19, 0x055B
    1884:	21 15       	cp	r18, r1
    1886:	31 05       	cpc	r19, r1
    1888:	41 f4       	brne	.+16     	; 0x189a <malloc+0xf2>
    188a:	2d b7       	in	r18, 0x3d	; 61
    188c:	3e b7       	in	r19, 0x3e	; 62
    188e:	40 91 56 05 	lds	r20, 0x0556
    1892:	50 91 57 05 	lds	r21, 0x0557
    1896:	24 1b       	sub	r18, r20
    1898:	35 0b       	sbc	r19, r21
    189a:	e0 91 a3 06 	lds	r30, 0x06A3
    189e:	f0 91 a4 06 	lds	r31, 0x06A4
    18a2:	e2 17       	cp	r30, r18
    18a4:	f3 07       	cpc	r31, r19
    18a6:	a0 f4       	brcc	.+40     	; 0x18d0 <malloc+0x128>
    18a8:	2e 1b       	sub	r18, r30
    18aa:	3f 0b       	sbc	r19, r31
    18ac:	28 17       	cp	r18, r24
    18ae:	39 07       	cpc	r19, r25
    18b0:	78 f0       	brcs	.+30     	; 0x18d0 <malloc+0x128>
    18b2:	ac 01       	movw	r20, r24
    18b4:	4e 5f       	subi	r20, 0xFE	; 254
    18b6:	5f 4f       	sbci	r21, 0xFF	; 255
    18b8:	24 17       	cp	r18, r20
    18ba:	35 07       	cpc	r19, r21
    18bc:	48 f0       	brcs	.+18     	; 0x18d0 <malloc+0x128>
    18be:	4e 0f       	add	r20, r30
    18c0:	5f 1f       	adc	r21, r31
    18c2:	50 93 a4 06 	sts	0x06A4, r21
    18c6:	40 93 a3 06 	sts	0x06A3, r20
    18ca:	81 93       	st	Z+, r24
    18cc:	91 93       	st	Z+, r25
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <malloc+0x12c>
    18d0:	e0 e0       	ldi	r30, 0x00	; 0
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	cf 01       	movw	r24, r30
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	08 95       	ret

000018dc <free>:
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <free+0xa>
    18e4:	91 c0       	rjmp	.+290    	; 0x1a08 <free+0x12c>
    18e6:	fc 01       	movw	r30, r24
    18e8:	32 97       	sbiw	r30, 0x02	; 2
    18ea:	13 82       	std	Z+3, r1	; 0x03
    18ec:	12 82       	std	Z+2, r1	; 0x02
    18ee:	60 91 a5 06 	lds	r22, 0x06A5
    18f2:	70 91 a6 06 	lds	r23, 0x06A6
    18f6:	61 15       	cp	r22, r1
    18f8:	71 05       	cpc	r23, r1
    18fa:	81 f4       	brne	.+32     	; 0x191c <free+0x40>
    18fc:	20 81       	ld	r18, Z
    18fe:	31 81       	ldd	r19, Z+1	; 0x01
    1900:	28 0f       	add	r18, r24
    1902:	39 1f       	adc	r19, r25
    1904:	80 91 a3 06 	lds	r24, 0x06A3
    1908:	90 91 a4 06 	lds	r25, 0x06A4
    190c:	82 17       	cp	r24, r18
    190e:	93 07       	cpc	r25, r19
    1910:	99 f5       	brne	.+102    	; 0x1978 <free+0x9c>
    1912:	f0 93 a4 06 	sts	0x06A4, r31
    1916:	e0 93 a3 06 	sts	0x06A3, r30
    191a:	76 c0       	rjmp	.+236    	; 0x1a08 <free+0x12c>
    191c:	db 01       	movw	r26, r22
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <free+0x4c>
    1924:	cd 01       	movw	r24, r26
    1926:	d9 01       	movw	r26, r18
    1928:	ae 17       	cp	r26, r30
    192a:	bf 07       	cpc	r27, r31
    192c:	48 f4       	brcc	.+18     	; 0x1940 <free+0x64>
    192e:	12 96       	adiw	r26, 0x02	; 2
    1930:	2d 91       	ld	r18, X+
    1932:	3c 91       	ld	r19, X
    1934:	13 97       	sbiw	r26, 0x03	; 3
    1936:	21 15       	cp	r18, r1
    1938:	31 05       	cpc	r19, r1
    193a:	a1 f7       	brne	.-24     	; 0x1924 <free+0x48>
    193c:	cd 01       	movw	r24, r26
    193e:	21 c0       	rjmp	.+66     	; 0x1982 <free+0xa6>
    1940:	b3 83       	std	Z+3, r27	; 0x03
    1942:	a2 83       	std	Z+2, r26	; 0x02
    1944:	ef 01       	movw	r28, r30
    1946:	49 91       	ld	r20, Y+
    1948:	59 91       	ld	r21, Y+
    194a:	9e 01       	movw	r18, r28
    194c:	24 0f       	add	r18, r20
    194e:	35 1f       	adc	r19, r21
    1950:	a2 17       	cp	r26, r18
    1952:	b3 07       	cpc	r27, r19
    1954:	79 f4       	brne	.+30     	; 0x1974 <free+0x98>
    1956:	2d 91       	ld	r18, X+
    1958:	3c 91       	ld	r19, X
    195a:	11 97       	sbiw	r26, 0x01	; 1
    195c:	24 0f       	add	r18, r20
    195e:	35 1f       	adc	r19, r21
    1960:	2e 5f       	subi	r18, 0xFE	; 254
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	31 83       	std	Z+1, r19	; 0x01
    1966:	20 83       	st	Z, r18
    1968:	12 96       	adiw	r26, 0x02	; 2
    196a:	2d 91       	ld	r18, X+
    196c:	3c 91       	ld	r19, X
    196e:	13 97       	sbiw	r26, 0x03	; 3
    1970:	33 83       	std	Z+3, r19	; 0x03
    1972:	22 83       	std	Z+2, r18	; 0x02
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	29 f4       	brne	.+10     	; 0x1982 <free+0xa6>
    1978:	f0 93 a6 06 	sts	0x06A6, r31
    197c:	e0 93 a5 06 	sts	0x06A5, r30
    1980:	43 c0       	rjmp	.+134    	; 0x1a08 <free+0x12c>
    1982:	dc 01       	movw	r26, r24
    1984:	13 96       	adiw	r26, 0x03	; 3
    1986:	fc 93       	st	X, r31
    1988:	ee 93       	st	-X, r30
    198a:	12 97       	sbiw	r26, 0x02	; 2
    198c:	4d 91       	ld	r20, X+
    198e:	5d 91       	ld	r21, X+
    1990:	a4 0f       	add	r26, r20
    1992:	b5 1f       	adc	r27, r21
    1994:	ea 17       	cp	r30, r26
    1996:	fb 07       	cpc	r31, r27
    1998:	69 f4       	brne	.+26     	; 0x19b4 <free+0xd8>
    199a:	20 81       	ld	r18, Z
    199c:	31 81       	ldd	r19, Z+1	; 0x01
    199e:	24 0f       	add	r18, r20
    19a0:	35 1f       	adc	r19, r21
    19a2:	2e 5f       	subi	r18, 0xFE	; 254
    19a4:	3f 4f       	sbci	r19, 0xFF	; 255
    19a6:	ec 01       	movw	r28, r24
    19a8:	39 83       	std	Y+1, r19	; 0x01
    19aa:	28 83       	st	Y, r18
    19ac:	22 81       	ldd	r18, Z+2	; 0x02
    19ae:	33 81       	ldd	r19, Z+3	; 0x03
    19b0:	3b 83       	std	Y+3, r19	; 0x03
    19b2:	2a 83       	std	Y+2, r18	; 0x02
    19b4:	e0 e0       	ldi	r30, 0x00	; 0
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <free+0xe2>
    19ba:	fb 01       	movw	r30, r22
    19bc:	bc 01       	movw	r22, r24
    19be:	db 01       	movw	r26, r22
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	8d 91       	ld	r24, X+
    19c4:	9c 91       	ld	r25, X
    19c6:	13 97       	sbiw	r26, 0x03	; 3
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	b9 f7       	brne	.-18     	; 0x19ba <free+0xde>
    19cc:	9b 01       	movw	r18, r22
    19ce:	2e 5f       	subi	r18, 0xFE	; 254
    19d0:	3f 4f       	sbci	r19, 0xFF	; 255
    19d2:	8d 91       	ld	r24, X+
    19d4:	9c 91       	ld	r25, X
    19d6:	11 97       	sbiw	r26, 0x01	; 1
    19d8:	82 0f       	add	r24, r18
    19da:	93 1f       	adc	r25, r19
    19dc:	40 91 a3 06 	lds	r20, 0x06A3
    19e0:	50 91 a4 06 	lds	r21, 0x06A4
    19e4:	48 17       	cp	r20, r24
    19e6:	59 07       	cpc	r21, r25
    19e8:	79 f4       	brne	.+30     	; 0x1a08 <free+0x12c>
    19ea:	30 97       	sbiw	r30, 0x00	; 0
    19ec:	29 f4       	brne	.+10     	; 0x19f8 <free+0x11c>
    19ee:	10 92 a6 06 	sts	0x06A6, r1
    19f2:	10 92 a5 06 	sts	0x06A5, r1
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <free+0x120>
    19f8:	13 82       	std	Z+3, r1	; 0x03
    19fa:	12 82       	std	Z+2, r1	; 0x02
    19fc:	22 50       	subi	r18, 0x02	; 2
    19fe:	30 40       	sbci	r19, 0x00	; 0
    1a00:	30 93 a4 06 	sts	0x06A4, r19
    1a04:	20 93 a3 06 	sts	0x06A3, r18
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <strnlen_P>:
    1a0e:	fc 01       	movw	r30, r24
    1a10:	05 90       	lpm	r0, Z+
    1a12:	61 50       	subi	r22, 0x01	; 1
    1a14:	70 40       	sbci	r23, 0x00	; 0
    1a16:	01 10       	cpse	r0, r1
    1a18:	d8 f7       	brcc	.-10     	; 0x1a10 <strnlen_P+0x2>
    1a1a:	80 95       	com	r24
    1a1c:	90 95       	com	r25
    1a1e:	8e 0f       	add	r24, r30
    1a20:	9f 1f       	adc	r25, r31
    1a22:	08 95       	ret

00001a24 <memset>:
    1a24:	dc 01       	movw	r26, r24
    1a26:	01 c0       	rjmp	.+2      	; 0x1a2a <memset+0x6>
    1a28:	6d 93       	st	X+, r22
    1a2a:	41 50       	subi	r20, 0x01	; 1
    1a2c:	50 40       	sbci	r21, 0x00	; 0
    1a2e:	e0 f7       	brcc	.-8      	; 0x1a28 <memset+0x4>
    1a30:	08 95       	ret

00001a32 <strnlen>:
    1a32:	fc 01       	movw	r30, r24
    1a34:	61 50       	subi	r22, 0x01	; 1
    1a36:	70 40       	sbci	r23, 0x00	; 0
    1a38:	01 90       	ld	r0, Z+
    1a3a:	01 10       	cpse	r0, r1
    1a3c:	d8 f7       	brcc	.-10     	; 0x1a34 <strnlen+0x2>
    1a3e:	80 95       	com	r24
    1a40:	90 95       	com	r25
    1a42:	8e 0f       	add	r24, r30
    1a44:	9f 1f       	adc	r25, r31
    1a46:	08 95       	ret

00001a48 <fputc>:
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	8c 01       	movw	r16, r24
    1a52:	eb 01       	movw	r28, r22
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	81 ff       	sbrs	r24, 1
    1a58:	1b c0       	rjmp	.+54     	; 0x1a90 <fputc+0x48>
    1a5a:	82 ff       	sbrs	r24, 2
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <fputc+0x30>
    1a5e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a60:	3f 81       	ldd	r19, Y+7	; 0x07
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	9d 81       	ldd	r25, Y+5	; 0x05
    1a66:	28 17       	cp	r18, r24
    1a68:	39 07       	cpc	r19, r25
    1a6a:	64 f4       	brge	.+24     	; 0x1a84 <fputc+0x3c>
    1a6c:	e8 81       	ld	r30, Y
    1a6e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a70:	01 93       	st	Z+, r16
    1a72:	f9 83       	std	Y+1, r31	; 0x01
    1a74:	e8 83       	st	Y, r30
    1a76:	06 c0       	rjmp	.+12     	; 0x1a84 <fputc+0x3c>
    1a78:	e8 85       	ldd	r30, Y+8	; 0x08
    1a7a:	f9 85       	ldd	r31, Y+9	; 0x09
    1a7c:	80 2f       	mov	r24, r16
    1a7e:	09 95       	icall
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	31 f4       	brne	.+12     	; 0x1a90 <fputc+0x48>
    1a84:	8e 81       	ldd	r24, Y+6	; 0x06
    1a86:	9f 81       	ldd	r25, Y+7	; 0x07
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	9f 83       	std	Y+7, r25	; 0x07
    1a8c:	8e 83       	std	Y+6, r24	; 0x06
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <fputc+0x4c>
    1a90:	0f ef       	ldi	r16, 0xFF	; 255
    1a92:	1f ef       	ldi	r17, 0xFF	; 255
    1a94:	c8 01       	movw	r24, r16
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	1f 91       	pop	r17
    1a9c:	0f 91       	pop	r16
    1a9e:	08 95       	ret

00001aa0 <__ultoa_invert>:
    1aa0:	fa 01       	movw	r30, r20
    1aa2:	aa 27       	eor	r26, r26
    1aa4:	28 30       	cpi	r18, 0x08	; 8
    1aa6:	51 f1       	breq	.+84     	; 0x1afc <__ultoa_invert+0x5c>
    1aa8:	20 31       	cpi	r18, 0x10	; 16
    1aaa:	81 f1       	breq	.+96     	; 0x1b0c <__ultoa_invert+0x6c>
    1aac:	e8 94       	clt
    1aae:	6f 93       	push	r22
    1ab0:	6e 7f       	andi	r22, 0xFE	; 254
    1ab2:	6e 5f       	subi	r22, 0xFE	; 254
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aba:	af 4f       	sbci	r26, 0xFF	; 255
    1abc:	b1 e0       	ldi	r27, 0x01	; 1
    1abe:	3e d0       	rcall	.+124    	; 0x1b3c <__ultoa_invert+0x9c>
    1ac0:	b4 e0       	ldi	r27, 0x04	; 4
    1ac2:	3c d0       	rcall	.+120    	; 0x1b3c <__ultoa_invert+0x9c>
    1ac4:	67 0f       	add	r22, r23
    1ac6:	78 1f       	adc	r23, r24
    1ac8:	89 1f       	adc	r24, r25
    1aca:	9a 1f       	adc	r25, r26
    1acc:	a1 1d       	adc	r26, r1
    1ace:	68 0f       	add	r22, r24
    1ad0:	79 1f       	adc	r23, r25
    1ad2:	8a 1f       	adc	r24, r26
    1ad4:	91 1d       	adc	r25, r1
    1ad6:	a1 1d       	adc	r26, r1
    1ad8:	6a 0f       	add	r22, r26
    1ada:	71 1d       	adc	r23, r1
    1adc:	81 1d       	adc	r24, r1
    1ade:	91 1d       	adc	r25, r1
    1ae0:	a1 1d       	adc	r26, r1
    1ae2:	20 d0       	rcall	.+64     	; 0x1b24 <__ultoa_invert+0x84>
    1ae4:	09 f4       	brne	.+2      	; 0x1ae8 <__ultoa_invert+0x48>
    1ae6:	68 94       	set
    1ae8:	3f 91       	pop	r19
    1aea:	2a e0       	ldi	r18, 0x0A	; 10
    1aec:	26 9f       	mul	r18, r22
    1aee:	11 24       	eor	r1, r1
    1af0:	30 19       	sub	r19, r0
    1af2:	30 5d       	subi	r19, 0xD0	; 208
    1af4:	31 93       	st	Z+, r19
    1af6:	de f6       	brtc	.-74     	; 0x1aae <__ultoa_invert+0xe>
    1af8:	cf 01       	movw	r24, r30
    1afa:	08 95       	ret
    1afc:	46 2f       	mov	r20, r22
    1afe:	47 70       	andi	r20, 0x07	; 7
    1b00:	40 5d       	subi	r20, 0xD0	; 208
    1b02:	41 93       	st	Z+, r20
    1b04:	b3 e0       	ldi	r27, 0x03	; 3
    1b06:	0f d0       	rcall	.+30     	; 0x1b26 <__ultoa_invert+0x86>
    1b08:	c9 f7       	brne	.-14     	; 0x1afc <__ultoa_invert+0x5c>
    1b0a:	f6 cf       	rjmp	.-20     	; 0x1af8 <__ultoa_invert+0x58>
    1b0c:	46 2f       	mov	r20, r22
    1b0e:	4f 70       	andi	r20, 0x0F	; 15
    1b10:	40 5d       	subi	r20, 0xD0	; 208
    1b12:	4a 33       	cpi	r20, 0x3A	; 58
    1b14:	18 f0       	brcs	.+6      	; 0x1b1c <__ultoa_invert+0x7c>
    1b16:	49 5d       	subi	r20, 0xD9	; 217
    1b18:	31 fd       	sbrc	r19, 1
    1b1a:	40 52       	subi	r20, 0x20	; 32
    1b1c:	41 93       	st	Z+, r20
    1b1e:	02 d0       	rcall	.+4      	; 0x1b24 <__ultoa_invert+0x84>
    1b20:	a9 f7       	brne	.-22     	; 0x1b0c <__ultoa_invert+0x6c>
    1b22:	ea cf       	rjmp	.-44     	; 0x1af8 <__ultoa_invert+0x58>
    1b24:	b4 e0       	ldi	r27, 0x04	; 4
    1b26:	a6 95       	lsr	r26
    1b28:	97 95       	ror	r25
    1b2a:	87 95       	ror	r24
    1b2c:	77 95       	ror	r23
    1b2e:	67 95       	ror	r22
    1b30:	ba 95       	dec	r27
    1b32:	c9 f7       	brne	.-14     	; 0x1b26 <__ultoa_invert+0x86>
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	61 05       	cpc	r22, r1
    1b38:	71 05       	cpc	r23, r1
    1b3a:	08 95       	ret
    1b3c:	9b 01       	movw	r18, r22
    1b3e:	ac 01       	movw	r20, r24
    1b40:	0a 2e       	mov	r0, r26
    1b42:	06 94       	lsr	r0
    1b44:	57 95       	ror	r21
    1b46:	47 95       	ror	r20
    1b48:	37 95       	ror	r19
    1b4a:	27 95       	ror	r18
    1b4c:	ba 95       	dec	r27
    1b4e:	c9 f7       	brne	.-14     	; 0x1b42 <__ultoa_invert+0xa2>
    1b50:	62 0f       	add	r22, r18
    1b52:	73 1f       	adc	r23, r19
    1b54:	84 1f       	adc	r24, r20
    1b56:	95 1f       	adc	r25, r21
    1b58:	a0 1d       	adc	r26, r0
    1b5a:	08 95       	ret

00001b5c <_exit>:
    1b5c:	f8 94       	cli

00001b5e <__stop_program>:
    1b5e:	ff cf       	rjmp	.-2      	; 0x1b5e <__stop_program>
